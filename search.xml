<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【教程】BiliDownloader新版交互视频下载教程</title>
      <link href="/2022/05/30/bilid_GUI_Interact/"/>
      <url>/2022/05/30/bilid_GUI_Interact/</url>
      
        <content type="html"><![CDATA[<h1 id="1-不同之处"><a href="#1-不同之处" class="headerlink" title="1. 不同之处"></a>1. 不同之处</h1><ul><li>旧版的交互视频下载（V1.5及以前）功能的先决条件是<strong>交互视频不能是无限循环的</strong>。因为旧版互动视频下载窗口弹出前，必须对所有的视频节点进行递归遍历，因此一旦视频出现无限循环，软件将会<strong>一直递归直到递归操作溢出导致错误结束</strong>；新版（V1.6版本及以后）主要采用手动探查方式，因此可以规避这一问题。</li><li>在<strong>交互视频分支数量过于庞大时</strong>，旧版的交互视频下载界面弹出时间会非常长！实测有6个分支四个选项的情况下，需要等待至少40分钟的时间才能完成探查，在探查中甚至会出现错误导致探查不全；而新版交互视频在手动探查的前提下，可以使用单个节点递归遍历功能，此方法可大大减少时间，让使用者能够更快地获取想要下载的节点分支视频。</li><li>旧版的交互视频只能显示节点名称，所以不能直观的看到各个节点所对应的具体选项信息。新版加入了缩略图显示功能，能够比较直观的查看节点对应选项信息。</li><li>相较于旧版，新版本加入了多线程节点递归探查功能，递归遍历节点的速度有大幅度提升。</li></ul><p><img src="/2022/05/30/bilid_GUI_Interact/1.png" alt="旧版新版外观对比" style="zoom:85%;"></p><h1 id="2-界面功能总述"><a href="#2-界面功能总述" class="headerlink" title="2. 界面功能总述"></a>2. 界面功能总述</h1><p>在探查框内输入互动视频所在的B站网页地址，点击<strong>资源探查</strong>并选择好有关的配置，点击<strong>下载资源</strong>后，会自动弹出<strong>互动视频下载</strong>对话框，如以下图片所示，按照标号，各个功能介绍如下：</p><p><img src="/2022/05/30/bilid_GUI_Interact/2.png" alt="各功能分区"></p><ul><li>功能区①：选项\缩略图刷新与显示功能操作模块。当<strong>显示缩略图</strong>被勾选，则节点选项缩略图将显示；不勾选则不显示。当刷新显示按钮按下，则会重新显示节点选择窗口。</li><li>功能区②：节点选择框。用于选择交互视频的选项，决定未来的分支发展，用于手动下载节点。当<strong>上一个节点</strong>按钮按下时，节点将会回溯到上一个选择节点；在点击<strong>下一个节点</strong>按钮之前，必须选中节点选择框内的选项（只能选择一个），点击后将会进入不同选项的分支内。</li><li>功能区③：状态显示区。主要显示该互动视频的名称，当前所在节点名称，当前节点ID编码已经软件状态。</li><li>功能区④：递归探查操作区。本功能主要延续了旧版的递归探查算法，增加了<strong>递归深度</strong>选项与<strong>从当前节点开始递归</strong>选择功能；一般地，递归深度数为节点选择的深度，当递归深度数小于0时，将会无限探查下去，在无限循环与分支深度过大的交互视频处理中会出错；当递归深度大于0时，递归所探查的节点深度将会小于等于递归深度数。</li><li>功能区⑤：下载操作区。若点击<strong>取消下载</strong>按钮，则交互视频下载窗口将关闭，不进行任何下载操作；若点击<strong>下载当前节点</strong>按钮，则BiliDownloader将智慧下载当前所在节点的视频；若点击<strong>下载已选择节点</strong>按钮，则BiliDownloader将会下载<strong>功能区⑦</strong>中所勾选节点的视频。</li><li>功能区⑥：交互视频节点图查看与保存操作区。<strong>宽度</strong>与<strong>高度</strong>限定了节点图的宽高，点击<strong>查看节点图</strong>可以显示已探查的节点图；点击<strong>调整节点图</strong>按钮可以将你设定的<strong>宽度</strong>与<strong>高度</strong>应用于节点图；点击<strong>保存为网页</strong>按钮，可以保存节点图；点击<strong>导出节点JSON</strong>按钮，可以保存一个json格式的互动视频结构模型。</li><li>功能区⑦：下载节点选择区。在这个组件内，你可以选择想要下载的互动视频素材。选中后你可以点击<strong>功能区⑤</strong>中的<strong>下载已选择节点</strong>进行下载，下载后的互动视频结构将以文件夹结构保存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> B站相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【考研自控】题型解法一：Nyquist曲线图与判据</title>
      <link href="/2021/12/04/Nyquist/"/>
      <url>/2021/12/04/Nyquist/</url>
      
        <content type="html"><![CDATA[<h1 id="【考研自控】题型解法一：Nyquist曲线图与判据"><a href="#【考研自控】题型解法一：Nyquist曲线图与判据" class="headerlink" title="【考研自控】题型解法一：Nyquist曲线图与判据"></a>【考研自控】题型解法一：Nyquist曲线图与判据</h1><blockquote><p>本题一般会给一个开环传递函数G(s)，根据开环传递函数画Nyquist曲线。</p></blockquote><h2 id="步骤一：分析开环传递函数"><a href="#步骤一：分析开环传递函数" class="headerlink" title="步骤一：分析开环传递函数"></a>步骤一：分析开环传递函数</h2><p>得到的开环传递函数一般如下所示：</p>$$G(s) = {{K\mathop \prod \limits_{i = 1}^m ({\tau _i}s + 1)} \over {{s^v}\mathop \prod \limits_{i = 1}^n ({T_i}s + 1)}} = {{K({\tau _1}s + 1)({\tau _2}s + 1) \cdots } \over {{s^v}({T_1}s + 1)({T_2}s + 1) \cdots }}$$<p>当你看到传递函数需要画奈氏图的时候，你需要一眼分析出以下信息：</p><ol><li>此传递函数为<strong>几型系统</strong>：由开环传递函数中的<script type="math/tex">v</script>确定；</li><li>开环传递函数的<strong>零极点与个数</strong>：<ul><li>零点：令<script type="math/tex">({\tau _i}s + 1) = 0 \Rightarrow s =  - {1 \over { {\tau _i} } }.(i = 1,2, \cdots ,m)</script>；</li><li>极点：令<script type="math/tex">({T_i}s + 1) = 0 \Rightarrow s =  - {1 \over { {T_i} } }.(i = 1,2, \cdots ,n)</script>；</li><li>零点个数为<script type="math/tex">m</script>，极点个数为<script type="math/tex">n</script>。</li></ul></li><li>判断该传递函数的<strong>环节</strong>（如积分环节、微分环节等）。</li></ol><h2 id="步骤二：求幅相率特性函数G-jω"><a href="#步骤二：求幅相率特性函数G-jω" class="headerlink" title="步骤二：求幅相率特性函数G(jω)"></a>步骤二：求幅相率特性函数G(jω)</h2><p>令<script type="math/tex">s = j\omega</script>，并带入开环传递函数，并经过整理可以得到<strong>复数函数</strong>，分别令实部为<script type="math/tex">U(\omega )</script>，虚部为<script type="math/tex">V(\omega )</script>形如：</p>$$G(j\omega ) = U(\omega ) + jV(\omega )$$<p>若开环传递函数由若干典型环节相串联：<script type="math/tex">G(s) = {G_1}(s) \cdot {G_2}(s) \cdots {G_n}(s)</script>，还可化为以下形式，</p>$$G(j\omega ) = |{G_1}(j\omega )||{G_2}(j\omega )| \cdots |{G_n}(j\omega )|{e^{j[\angle {G_1}(j\omega ) + \angle {G_2}(j\omega ) +  \cdots  + \angle {G_n}(j\omega )]}}$$<p>其中可以得到幅频和相频分别为：</p>$$\eqalign{  & A(\omega ) = |{G_1}(j\omega )||{G_2}(j\omega )| \cdots |{G_n}(j\omega )|  \cr   & \varphi (\omega ) = \angle {G_1}(j\omega ) + \angle {G_2}(j\omega ) +  \cdots  + \angle {G_n}(j\omega ) \cr} $$<p>例如传递函数<script type="math/tex">G(s) = { {K(s + 1)} \over {s(2s + 1)(s - 2)} }</script>，可求得：</p>$$A(\omega ) = {{K\sqrt {({\omega ^2} + 1)} } \over {\omega \sqrt {(4{\omega ^2} + 1)} \sqrt {({\omega ^2} + 4)} }}$$$$\varphi (\omega ) =  - \arctan ({\omega  \over 0}) - arctan({{2\omega } \over 1}) - arctan({\omega  \over { - 2}}) + arctan({\omega  \over 1})$$<p>注：若已确定为<script type="math/tex">v</script>型系统，可直接将<script type="math/tex">- \arctan ({\omega  \over 0})</script>替换为<script type="math/tex">- v \cdot {90^ \circ }</script>。最终整理为以下的公式：</p>$$\varphi (\omega ) =  - {90^ \circ } - arctan(2\omega ) - arctan({\omega  \over { - 2}}) + arctan(\omega )$$<h2 id="步骤三：绘制Nyquist曲线"><a href="#步骤三：绘制Nyquist曲线" class="headerlink" title="步骤三：绘制Nyquist曲线"></a>步骤三：绘制Nyquist曲线</h2><p>首先确定增补线，若开环传递函数包含积分环节，应从<script type="math/tex">\omega  \to {0^ + }</script>对应的点开始，补做一个半径为无穷，逆时针方向旋转<script type="math/tex">- v \cdot {90^ \circ }</script>的大圆弧增补线，把它视为Nyquist曲线的一部分。再确定奈氏图的起点，令<script type="math/tex">\omega  \to {0^ + }</script>，求奈氏图起点角度与距离：</p>$${A_1} = \mathop {\lim }\limits_{\omega  \to 0} A(\omega ),{\theta _1}{\rm{ = }}\mathop {\lim }\limits_{\omega  \to {0^ + }} \varphi (\omega )$$<p>确定奈氏图终点，令<script type="math/tex">\omega  \to  + \infty</script>，求奈氏图终点角度与距离：</p>$${A_2} = \mathop {\lim }\limits_{\omega  \to  + \infty } A(\omega ),{\theta _2}{\rm{ = }}\mathop {\lim }\limits_{\omega  \to  + \infty } \varphi (\omega )$$<p>确定奈氏图与实轴的交点，方便以后的Nyquist判据，令<script type="math/tex">V(\omega ) = 0</script>，求出<script type="math/tex">\omega</script>，再带入<script type="math/tex">U(\omega )</script>，即可得与实轴的交点。并根据以上信息可以画出奈氏图的大致曲线。</p><h2 id="步骤四：利用Nyquist判定系统的稳定性（若题目要求）"><a href="#步骤四：利用Nyquist判定系统的稳定性（若题目要求）" class="headerlink" title="步骤四：利用Nyquist判定系统的稳定性（若题目要求）"></a>步骤四：利用Nyquist判定系统的稳定性（若题目要求）</h2><p>首先列出稳定性判据：通过绘制的<script type="math/tex">\omega</script>从<script type="math/tex">0 \to \infty</script>时的开环幅相特性曲线（奈氏图），按其包围<script type="math/tex">( - 1,j0)</script>的圈数<script type="math/tex">N</script>（逆时针为正，顺时针为负）和开环传递函数<script type="math/tex">s</script>在右半平面根的个数<script type="math/tex">P</script>，根据公式：</p>$$Z = P - 2N$$<p>来确定闭环特征方程正实部根的个数。若<script type="math/tex">Z=0</script>，闭环系统是<strong>稳定的</strong>，否则闭环系统<strong>不稳定</strong>。</p><p>将增补线作为奈氏图的一部分，分别利用以下<strong>穿越类型</strong>来确定圈数<script type="math/tex">N</script>：</p><ul><li><strong>正穿越：</strong>随着<script type="math/tex">\omega</script>的增大，开环幅相曲线<strong>逆时针（由上到下）</strong>穿越点<script type="math/tex">( - 1,j0)</script>左侧的负实轴，记为一次正穿越，<strong>计数为正</strong>，记为<script type="math/tex">{N_ + }</script>。</li><li><strong>负穿越：</strong>随着<script type="math/tex">\omega</script>的增大，开环幅相曲线<strong>顺时针（由下到上）</strong>穿越点<script type="math/tex">( - 1,j0)</script>左侧的负实轴，记为一次负穿越，<strong>计数为负</strong>，记为<script type="math/tex">{N_ - }</script>。</li><li><strong>半次穿越：</strong>开环幅相曲线起始于（或终止于）点<script type="math/tex">( - 1,j0)</script>左侧的负实轴，若<strong>沿逆时针方向离开（或终止于）负实轴</strong>，记为<strong>半次正穿越</strong>，用<script type="math/tex">{1 \over 2}{N_ + }</script>表示；若<strong>沿顺时针方向离开（或终止于）负实轴</strong>，记为<strong>半次负穿越</strong>，用<script type="math/tex">{1 \over 2}{N_ - }</script>表示；</li></ul><p><img src="/2021/12/04/Nyquist/1.jpg" alt="穿越图例" style="zoom:50%;"></p><p>可参考以下示例进行判断：</p><p><img src="/2021/12/04/Nyquist/2.jpg" alt="Nyquist穿越参考" style="zoom:80%;"></p><h2 id="经典真题"><a href="#经典真题" class="headerlink" title="经典真题"></a>经典真题</h2><p><strong>题目：</strong>（北航933，2010，三）已知某单位负反馈系统开环传递函数为：</p>$$G(s) = {{2(s + 1)} \over {s(s - 1)}}$$<ol><li>画开环Nyquist曲线；</li><li>利用Nyquist判据判断系统闭环稳定性。</li></ol><p><strong>解答：</strong>（1）令<script type="math/tex">s = j\omega</script>，得到：</p>$$\eqalign{  & G(j\omega ) = {{ - 2 - 2\omega } \over {{\omega ^2} + 1}} + j{{2 - 2{\omega ^2}} \over {{\omega ^3} + \omega }}  \cr   & A(\omega ) = {{2\sqrt {({\omega ^2} + 1)} } \over {\omega \sqrt {{\omega ^2} + 1} }}  \cr   & \varphi (\omega ) =  - {90^ \circ } - \arctan ( - \omega ) + \arctan (\omega ) \cr} $$<p>其中，当<script type="math/tex">\omega  \to {0^ + }</script>时：</p>$$\mathop {\lim }\limits_{\omega  \to {0^ + }} A(\omega ) = \infty ,\mathop {\lim }\limits_{\omega  \to {0^ + }} \varphi (\omega ) =  - {270^ \circ }$$<p>当<script type="math/tex">\omega  \to + \infty</script>是，有：</p>$$\mathop {\lim }\limits_{\omega  \to \infty } A(\omega ) = 0,\mathop {\lim }\limits_{\omega  \to \infty } \varphi (\omega ) =  - {90^ \circ }$$<p>求曲线与实轴的交点，令</p>$$V(\omega ) = {{2 - 2{\omega ^2}} \over {{\omega ^3} + \omega }} = 0 \Rightarrow \omega  = 1$$<p>将求出的<script type="math/tex">\omega</script>带入实部<script type="math/tex">U(\omega )</script>得到交点：</p>$$U(1) = {{ - 2 - 2} \over {1 + 1}} =  - 2$$<p>因为存在积分环节且<script type="math/tex">v=1</script>，则增补线起始点应该在实轴的负半轴上，则Nyquist曲线图如下所示：</p><p><img src="/2021/12/04/Nyquist/3.jpg" alt="Nyquist曲线图" style="zoom:50%;"></p><p>（2）由Nyquist曲线图进行分析，曲线与实轴交点为<script type="math/tex">( - 2,j0)</script>，包含点<script type="math/tex">( - 1,j0)</script>，曲线起始于点<script type="math/tex">( - 1,j0)</script>左侧的负实轴，并逆时针穿越负实轴，因为记为半次穿越，则<script type="math/tex">N = {1 \over 2}</script>；开环传递函数右半平面根的个数<script type="math/tex">P = 1</script>，根据公式<script type="math/tex">Z = P - 2N = 0</script>,，因此闭环系统稳定。</p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动控制原理 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【教程】如何使用BiliDownloader下载器</title>
      <link href="/2021/10/07/bilid_GUI_help/"/>
      <url>/2021/10/07/bilid_GUI_help/</url>
      
        <content type="html"><![CDATA[<h1 id="1-软件界面"><a href="#1-软件界面" class="headerlink" title="1. 软件界面"></a>1. 软件界面</h1><p><img src="/2021/10/07/bilid_GUI_help/mainGUI.jpg" alt="mainGUI"></p><h1 id="2-系统环境准备"><a href="#2-系统环境准备" class="headerlink" title="2. 系统环境准备"></a>2. 系统环境准备</h1><h2 id="2-1-Windows操作系统准备"><a href="#2-1-Windows操作系统准备" class="headerlink" title="2.1 Windows操作系统准备"></a>2.1 Windows操作系统准备</h2><ol><li>将下载好的压缩包进行解压即可；</li><li>可执行程序为解压目录内的<code>biliDownloader_GUI.exe</code>文件；</li><li>若您需要更新本程序，请直接通过压缩包覆盖根目录内原文件即可。</li></ol><h2 id="2-2-Ubuntu-Desktop操作系统"><a href="#2-2-Ubuntu-Desktop操作系统" class="headerlink" title="2.2 Ubuntu Desktop操作系统"></a>2.2 Ubuntu Desktop操作系统</h2><p><strong>方法一：直接下载运行包使用（没有桌面LOGO图标）：</strong></p><ol><li><p>下载程序后使用以下命令进行解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf biliDownloader-ubuntu.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>运行下列命令搭建软件运行环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libxcb-xinerama0</span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure></li><li><p>在解压目录内运行以下命令即可打开程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./biliDownloader_GUI</span><br></pre></td></tr></table></figure></li></ol><p><strong>方法二：使用deb安装包方式安装（有桌面LOGO图标）：</strong></p><ol><li><p>运行以下命令搭建软件基本安装环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libxcb-xinerama0</span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure></li><li><p>下载<strong>deb</strong>安装包到本地，使用dpkg进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i BiliDownloader_1.6.20220610_amd64.deb</span><br></pre></td></tr></table></figure></li><li><p>查看程序目录即可看见Bili Downloader的LOGO，直接点击即可运行；</p></li><li><p>使用以下指令可以卸载安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -r BiliDownloader</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-MacOS-X操作系统"><a href="#2-3-MacOS-X操作系统" class="headerlink" title="2.3 MacOS X操作系统"></a>2.3 MacOS X操作系统</h2><p><strong>方法一：直接通过镜像下载安装</strong></p><ol><li>将下载的“.dmg”文件双击挂载；</li><li>将左侧的BiliDownloader图标拖入右侧的应用程序文件夹即可安装。</li></ol><p><strong>方法二：使用Homebrew软件包的管理器安装</strong></p><ol><li>若因为GFW导致<a href="https://brew.sh/">Homebrew</a>下载或安装失败，请更换国内源解决。<a href="http://mirrors.ustc.edu.cn/help/brew.git.html">使用 USTC 镜像教程</a>；</li><li><p>在Shell中输入以下代码进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask bili-downloader</span><br></pre></td></tr></table></figure></li><li><p>在Shell中使用以下代码进行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade --cask bili-downloader</span><br></pre></td></tr></table></figure></li></ol><p><strong>若打开显示程序已损坏，请确认已经运行<code>sudo spctl --master-disable</code>解除开发者限制！！</strong></p><h1 id="3-如何使用"><a href="#3-如何使用" class="headerlink" title="3. 如何使用"></a>3. 如何使用</h1><h2 id="3-1-如何获取视频信息"><a href="#3-1-如何获取视频信息" class="headerlink" title="3.1 如何获取视频信息"></a>3.1 如何获取视频信息</h2><ol><li>在输入框内输入从浏览器上拷贝的<strong>视频页面HTTP/HTTPS</strong>地址；</li><li>单击<strong>资源探查</strong>按钮即可获取信息。</li></ol><p><img src="/2021/10/07/bilid_GUI_help/GetPreInfo.gif" alt="获取视频信息"></p><h2 id="3-2-如何下载视频"><a href="#3-2-如何下载视频" class="headerlink" title="3.2 如何下载视频"></a>3.2 如何下载视频</h2><ol><li>在获取视频信息后，媒体下载选择框内选择要下载的视频资源；</li><li>单击<strong>下载资源</strong>按钮即可进行资源下载；</li><li>在下载过程中，可单击<strong>暂停下载</strong>与<strong>停止下载</strong>执行下载的暂停与终止；</li><li><strong>在视频合成阶段时只能终止不能暂停。</strong></li></ol><p><img src="/2021/10/07/bilid_GUI_help/Download.gif" alt="下载视频"></p><h2 id="3-3-视频下载选项"><a href="#3-3-视频下载选项" class="headerlink" title="3.3 视频下载选项"></a>3.3 视频下载选项</h2><ol><li>在<strong>清晰度</strong>分组框内可以选择下载视频流的清晰度；</li><li>在<strong>音频清晰度</strong>分组框内可以选择下载音频流的清晰度；</li><li>若需要合并下载的音频流与视频流，请保持<strong>FFMPEG合成</strong>选择框选中；</li><li>若需要下载高质量视频或者番剧、电影等付费资源，可以点击<strong>高级设置</strong>按钮，在<strong>Cookie修改</strong>框内输入大会员用户的Cookie，并确定设置；保持<strong>使用VIP Cookie</strong>选择框选中<a href="/2021/10/06/Get_bilibili_cookie/">（如何获取Cookie？）</a>；</li><li>可点击<strong>下载目录</strong>右侧的<strong>浏览</strong>按键选择视频输出的文件夹。</li></ol><p><img src="/2021/10/07/bilid_GUI_help/OptForDown.gif" alt="下载选项"></p><h2 id="3-4-互动视频下载"><a href="#3-4-互动视频下载" class="headerlink" title="3.4 互动视频下载"></a>3.4 互动视频下载</h2><p><del>1. 将互动视频的网页连接放入资源探查框中，点击资源探查软件将自动识别是否为交互视频；</del></p><p><del>2. 探查完成后，进行（3.3视频下载选项）中的操作；</del></p><p><del>3. 点击<strong>下载资源</strong>按钮，软件将自动分析互动视频节点信息，随后载入<strong>互动视频下载</strong>选项窗体；</del></p><p><del>4. 您可以在左边树形图区域选择需要下载的视频节点</del></p><p><del>5. 点击下载按钮即可进行下载。</del></p><p>互动视频下载功能已于<strong>2022-04-07更新</strong>！变得更快，更方便，更强大！请<a href="https://zmtblog.xdkd.ltd/2022/05/30/bilid_GUI_Interact/">点击此处</a>查看互动视频下载教程！</p><h2 id="3-5-“僅限港澳台地區”视频下载"><a href="#3-5-“僅限港澳台地區”视频下载" class="headerlink" title="3.5 “僅限港澳台地區”视频下载"></a>3.5 “僅限港澳台地區”视频下载</h2><ol><li><p>此类视频无法通过中国大陆的IP进行访问，必须要配置<strong>中国港澳台或者境外的代理IP</strong>才能访问；</p></li><li><p>拥有<strong>中国港澳台或者境外的代理IP</strong>的使用者：</p><ol><li>一般您会拥有一个IP地址与端口号；</li><li>打开<strong>高级设置</strong>界面，将您的IP与端口号以<code>http://(你的IP):(你的端口号)</code>的形式填入，例如<code>http://119.3.234.165:2233</code>；</li></ol><p><img src="/2021/10/07/bilid_GUI_help/ProxyExample.jpg" alt="代理IP例子"></p></li><li><p>若您使用酸酸乳等<strong>科学上网工具</strong>：</p><ol><li>以SSR为例，右击<strong>纸飞机</strong>弹出菜单，在<strong>更多—&gt;选项设置</strong>里打开设置窗口；</li><li>在本地代理分组框内选中<strong>允许来自局域网的连接</strong>，设置本地端口的值（一般默认为1080）并单击<strong>确定</strong>；</li><li>打开<strong>高级设置</strong>界面，将您设置的端口号以<code>http://127.0.0.1:(设置的端口号)</code>的形式填入，例如<code>http://127.0.0.1:1080</code></li></ol><p><img src="/2021/10/07/bilid_GUI_help/SSRSet.gif" alt="酸酸乳工具设置"></p></li><li><p>单击<strong>测试地址</strong>按钮可以检测该代理是否可以访问到B站，反馈信息将在只读编辑框里显示；</p></li><li><p>若代理测试成功，选中<strong>使用代理</strong>选择框并且单击<strong>确定设置</strong>按钮即可使用该代理。</p></li></ol><p><img src="/2021/10/07/bilid_GUI_help/ProxyBiliSet.gif" alt="设置代理地址"></p><h2 id="3-6-其他"><a href="#3-6-其他" class="headerlink" title="3.6 其他"></a>3.6 其他</h2><ol><li>若需要更新下载器，请点击主界面上的<strong>关于</strong>按钮进入关于程序界面，点击<strong>检查更新</strong>按钮，若程序存在最新版本，下载器将自动打开浏览器并进入下载界面，您可以下载压缩包覆盖目录即可。</li><li><del>注意：在更新覆盖时，请将程序根目录下的“setting.conf”文件进行备份，防止更新时丢失您预置的大会员Cookie；</del>现在可以直接覆盖安装，<strong>setting.conf</strong>文件不会被覆盖。</li><li>若您发现软件存在<strong>BUG</strong>，请点击<strong>关于</strong>，并在<strong>BUG反馈</strong>中提交BUG，程序猿将尽快修复漏洞。</li><li>您还可以关注<strong>本网站</strong>，或者关注作者<strong>B站账户：</strong><a href="https://space.bilibili.com/28141586">二代死神</a>。</li></ol><h1 id="特性展示与教程视频（V1-5版本老版本）"><a href="#特性展示与教程视频（V1-5版本老版本）" class="headerlink" title="特性展示与教程视频（V1.5版本老版本）"></a>特性展示与教程视频（V1.5版本老版本）</h1><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=891280356&bvid=BV1aP4y1b79t&cid=429970170&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><h1 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h1><p>若您还存在其他问题，请通过<strong>邮箱：</strong><a href="mailto:mibemail@163.com">mibemail@163.com</a>或<strong>B站账户：</strong><a href="https://space.bilibili.com/28141586">二代死神</a>与作者取得联系，感谢您使用Bili Downloader，我们将不断的完善它。</p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> B站相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【教程】如何获取B站用户Cookie</title>
      <link href="/2021/10/06/Get_bilibili_cookie/"/>
      <url>/2021/10/06/Get_bilibili_cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：打开BILIBILI弹幕视频网站，并且确保已经登录了您的账户"><a href="#第一步：打开BILIBILI弹幕视频网站，并且确保已经登录了您的账户" class="headerlink" title="第一步：打开BILIBILI弹幕视频网站，并且确保已经登录了您的账户"></a>第一步：打开BILIBILI弹幕视频网站，并且确保已经登录了您的账户</h2><p><img src="/2021/10/06/Get_bilibili_cookie/1.png" alt="1"></p><h2 id="第二步：选中浏览器窗口的情况下，按下键盘上的F12按键进入测试界面，并选中“Network”选择夹"><a href="#第二步：选中浏览器窗口的情况下，按下键盘上的F12按键进入测试界面，并选中“Network”选择夹" class="headerlink" title="第二步：选中浏览器窗口的情况下，按下键盘上的F12按键进入测试界面，并选中“Network”选择夹"></a>第二步：选中浏览器窗口的情况下，按下键盘上的F12按键进入测试界面，并选中“Network”选择夹</h2><p><img src="/2021/10/06/Get_bilibili_cookie/2.jpg" alt="2"></p><h2 id="第三步：选中浏览器窗口的情况下，按下键盘上的“Ctrl-R”键，并将列表往上拖"><a href="#第三步：选中浏览器窗口的情况下，按下键盘上的“Ctrl-R”键，并将列表往上拖" class="headerlink" title="第三步：选中浏览器窗口的情况下，按下键盘上的“Ctrl + R”键，并将列表往上拖"></a>第三步：选中浏览器窗口的情况下，按下键盘上的“Ctrl + R”键，并将列表往上拖</h2><p><img src="/2021/10/06/Get_bilibili_cookie/3.jpg" alt="3"></p><h2 id="第四步：选中第一个“www-bilibili-com”选项，并选择右侧“Headers”选项卡"><a href="#第四步：选中第一个“www-bilibili-com”选项，并选择右侧“Headers”选项卡" class="headerlink" title="第四步：选中第一个“www.bilibili.com”选项，并选择右侧“Headers”选项卡"></a>第四步：选中第一个“www.bilibili.com”选项，并选择右侧“Headers”选项卡</h2><p><img src="/2021/10/06/Get_bilibili_cookie/4.jpg" alt="4"></p><h2 id="第五步：在选项卡中的“Request-Headers”-“cookie”中找到我们的cookie"><a href="#第五步：在选项卡中的“Request-Headers”-“cookie”中找到我们的cookie" class="headerlink" title="第五步：在选项卡中的“Request Headers”-“cookie”中找到我们的cookie"></a>第五步：在选项卡中的“Request Headers”-“cookie”中找到我们的cookie</h2><p><img src="/2021/10/06/Get_bilibili_cookie/5.jpg" alt="5"></p><p><code>cookie：</code>后的“buvid…….”即是我们需要的cookie。</p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> B站相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学术】4-麦克纳姆轮平台运动学建模</title>
      <link href="/2021/09/01/mecanum-kinematics/"/>
      <url>/2021/09/01/mecanum-kinematics/</url>
      
        <content type="html"><![CDATA[<h2 id="1-单个麦克纳姆轮运动模型"><a href="#1-单个麦克纳姆轮运动模型" class="headerlink" title="1. 单个麦克纳姆轮运动模型"></a>1. 单个麦克纳姆轮运动模型</h2><p>麦克纳姆轮由一个轮毂与多个辊子构成的异形轮，其中麦克纳姆轮轮轴与辊子滚轴夹角为45°。如图1.1(a)所示，在麦克纳姆轮转动时，辊子将与地面进行摩擦并产生特殊的速度分量<script type="math/tex">{v_{ir}}</script>，为垂直于辊子的速度<sup>[1]</sup>。</p><p><img src="/2021/09/01/mecanum-kinematics/model.png" alt="图1.1 单个麦克纳姆轮模型参数"></p><p>可以根据图1.1(b)可以计算出车轮<script type="math/tex">i</script>产生的前向速度分量<script type="math/tex">{w_{Ei}}</script>与自由辊子与地面所接触的切向速度<script type="math/tex">{v_{ir}}</script>，并满足公式(4-1)。<br>$${v_{ir}} = \frac{1}{{\cos {{45}^ \circ }}}{r_r}{\omega _i},\:{w_{Ei}} = {r_i}{\omega _i},\:i = 1,2,3,4\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-1)$$<br>同时根据图1.1(b)可以求出单个轮子的平面坐标系<script type="math/tex">{S_i}{P_i}{E_i}</script>上的速度分量，他们分别用<script type="math/tex">{w_{Si}}</script>与<script type="math/tex">{w_{Ei}}</script>来表示，并整理出式(4-2)。<br>$$\left[ {\begin{array}{*{20}{c}}{{v_{Si}}}\\{{v_{Ei}}}\end{array}} \right] = \left[ {\begin{array}{*{20}{c}}0&{\sin {\gamma _i}}\\{{r_i}}&{\cos {\gamma _i}}\end{array}} \right]\left[ {\begin{array}{*{20}{c}}{{\omega _i}}\\{{v_{ir}}}\end{array}} \right]\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-2)$$</p><h2 id="2-单个麦轮运动模型转移"><a href="#2-单个麦轮运动模型转移" class="headerlink" title="2. 单个麦轮运动模型转移"></a>2. 单个麦轮运动模型转移</h2><p>在上一节中我们得到了单个麦克纳姆轮的运动模型和速度分量，现在我们将它的速度分量转移到平台中心坐标系。根据图1.1(a)中可以将单个轮子的平面坐标系转变为移动机器人中心点的坐标系<script type="math/tex">{X_R}O{Y_R}</script>，并得到机器人平台速度分量<script type="math/tex">{v_{Xi}}</script>与<script type="math/tex">{v_{Yi}}</script>的关系式(4-3)。<br>$$\left[ {\begin{array}{*{20}{c}}{{v_{Xi}}}\\{{v_{Yi}}}\end{array}} \right] = \left[ {\begin{array}{*{20}{c}}{\cos {\beta _i}}&{ - \sin {\beta _i}}\\{\sin {\beta _i}}&{\cos {\beta _i}}\end{array}} \right]\left[ {\begin{array}{*{20}{c}}{{v_{Si}}}\\{{v_{Ei}}}\end{array}} \right]\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-3)$$<br>在本移动机器人平台中，机器人的运动是处于平面上的，根据机器人运动学可以将式(4-3)化简为(4-4)，其中<script type="math/tex">{v_X}</script>和<script type="math/tex">{v_Y}</script>表示机器人<script type="math/tex">{X_R}O{Y_R}</script>坐标系平面内移动的速度分量，<script type="math/tex">{\omega _R}</script>表示围绕机器人中心点平面内旋转的角速度。<br>$$\left[ {\begin{array}{*{20}{c}}{{v_{Xi}}}\\{{v_{Yi}}}\end{array}} \right] = \left[ {\begin{array}{*{20}{c}}{\begin{array}{*{20}{c}}1&0&{ - {l_{iy}}}\end{array}}\\{\begin{array}{*{20}{c}}0&1&{{l_{ix}}}\end{array}}\end{array}} \right]\left[ {\begin{array}{*{20}{c}}{{v_X}}\\{{v_Y}}\\{{\omega _R}}\end{array}} \right]\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-4)$$</p><p>通过关系式(4-2)、(4-3)与(4-4)可以得到移动机器人的变换矩阵。</p>$${}^{{w_i}}{T_{{P_i}}} = \left[ {\begin{array}{*{20}{c}}0&{\sin {\gamma _i}}\\{{r_i}}&{\cos {\gamma _i}}\end{array}} \right],\:{}^{{P_i}}{T_R} = \left[ {\begin{array}{*{20}{c}}{\cos {\beta _i}}&{ - \sin {\beta _i}}\\{\sin {\beta _i}}&{\cos {\beta _i}}\end{array}} \right],\:T' = \left[ {\begin{array}{*{20}{c}}{\begin{array}{*{20}{c}}1&0&{ - {l_{iy}}}\end{array}}\\{\begin{array}{*{20}{c}}0&1&{{l_{ix}}}\end{array}}\end{array}} \right]\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-5)$$$${r_i} \ne 0,\:0 < |{\gamma _i}| < \frac{\pi }{2},\:\det ({}^{{P_i}}{T_R}) \ne 0,\:\det ({}^{{w_i}}{T_{{P_i}}}) \ne 0\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-6)$$<p>当公式(4-6)成立时，可以得到矩阵变换关系式(4-7)。<br>$$\left[ {\begin{array}{*{20}{c}}{{\omega _i}}\\{{v_{ir}}}\end{array}} \right] = {}^{{w_i}}{T_{{P_i}}}^{ - 1} \cdot {}^{{P_i}}{T_R}^{ - 1} \cdot T'\left[ {\begin{array}{*{20}{c}}{{v_X}}\\{{v_Y}}\\{{\omega _R}}\end{array}} \right],\:i = 1,2,3,4.\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-7)$$<br>在移动机器人平台的设计中，四个轮子的半径<script type="math/tex">{r_i}</script>是一致的，可以用<script type="math/tex">r</script>来表示四个轮子的半径，经过整理可得关系式(4-8)。<br>$$\left[ {\begin{array}{*{20}{c}}{{\omega _1}}\\{{\omega _2}}\\{{\omega _3}}\\{{\omega _4}}\end{array}} \right] = \frac{{ - 1}}{r}\left[ {\begin{array}{*{20}{c}}{\begin{array}{*{20}{c}}{\frac{{\cos ({\beta _1} - {\gamma _1})}}{{\sin {\gamma _1}}}}\\{\frac{{\cos ({\beta _2} - {\gamma _2})}}{{\sin {\gamma _2}}}}\\{\frac{{\cos ({\beta _3} - {\gamma _3})}}{{\sin {\gamma _3}}}}\\{\frac{{\cos ({\beta _4} - {\gamma _4})}}{{\sin {\gamma _4}}}}\end{array}}&{\begin{array}{*{20}{c}}{\frac{{sin({\beta _1} - {\gamma _1})}}{{\sin {\gamma _1}}}}\\{\frac{{sin({\beta _2} - {\gamma _2})}}{{\sin {\gamma _2}}}}\\{\frac{{sin({\beta _3} - {\gamma _3})}}{{\sin {\gamma _3}}}}\\{\frac{{sin({\beta _4} - {\gamma _4})}}{{\sin {\gamma _4}}}}\end{array}}&{\begin{array}{*{20}{c}}{\frac{{{l_1}sin({\beta _1} - {\gamma _1} - {\alpha _1})}}{{\sin {\gamma _1}}}}\\{\frac{{{l_2}sin({\beta _2} - {\gamma _2} - {\alpha _2})}}{{\sin {\gamma _2}}}}\\{\frac{{{l_3}sin({\beta _3} - {\gamma _3} - {\alpha _3})}}{{\sin {\gamma _3}}}}\\{\frac{{{l_4}sin({\beta _4} - {\gamma _4} - {\alpha _4})}}{{\sin {\gamma _4}}}}\end{array}}\end{array}} \right]\left[ {\begin{array}{*{20}{c}}{{v_X}}\\{{v_Y}}\\{{\omega _R}}\end{array}} \right]\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-8)$$</p><h2 id="3-通过装配确定最终运动模型"><a href="#3-通过装配确定最终运动模型" class="headerlink" title="3. 通过装配确定最终运动模型"></a>3. 通过装配确定最终运动模型</h2><p>在此给出已经装配好的4-麦克纳姆轮平台的示例，如图3.1所示。</p><p><img src="/2021/09/01/mecanum-kinematics/setup.png" alt="3.1 平台安装示例"></p><p>参照图3.1所示移动机器人平台的安装参数，并带入到公式(4-8)中，经过整理最后得到公式(4-9)。<br>$$\left[ {\begin{array}{*{20}{c}}{{\omega _1}}\\{{\omega _2}}\\{{\omega _3}}\\{{\omega _4}}\end{array}} \right] = \frac{1}{r}\left[ {\begin{array}{*{20}{c}}{\begin{array}{*{20}{c}}1\\1\\1\\1\end{array}}&{\begin{array}{*{20}{c}}{ - 1}\\1\\1\\{ - 1}\end{array}}&{\begin{array}{*{20}{c}}{ - ({l_x} + {l_y})}\\{({l_x} + {l_y})}\\{ - ({l_x} + {l_y})}\\{({l_x} + {l_y})}\end{array}}\end{array}} \right]\left[ {\begin{array}{*{20}{c}}{{v_X}}\\{{v_Y}}\\{{\omega _R}}\end{array}} \right]\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-9)$$<br>在此设定一个速度矢量<script type="math/tex">\vec V</script>，如图3.2所示。其中<script type="math/tex">{v_X}</script>表示移动平台在<em>X</em>轴上的速度分量，<script type="math/tex">{v_Y}</script>为移动平台在<em>Y</em>轴上的速度分量。</p><p><img src="/2021/09/01/mecanum-kinematics/mcm.svg" alt="图3.2 移动速度矢量"></p><p>将速度分量<script type="math/tex">{v_X}</script>与<script type="math/tex">{v_Y}</script>分别代入式(4-10)可得到四个麦克纳姆轮的转速值，因不包含偏航角速度，<script type="math/tex">{\omega _R}</script>为零。经过整理可以得到四个麦克纳姆轮的转速，分别用<script type="math/tex">{\omega _1}</script>~<script type="math/tex">{\omega _4}</script>表示，得到式(4-11)。<br>$$\left\{ {\begin{array}{*{20}{c}}{{v_1} = r{\omega _1} = {v_X} - {v_Y} - ({l_x} + {l_y}){\omega _R}}\\{{v_2} = r{\omega _2} = {v_X} + {v_Y} + ({l_x} + {l_y}){\omega _R}}\\{{v_3} = r{\omega _3} = {v_X} + {v_Y} - ({l_x} + {l_y}){\omega _R}}\\{{v_4} = r{\omega _4} = {v_X} - {v_Y} + ({l_x} + {l_y}){\omega _R}}\end{array}} \right.\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-10)$$</p>$$\left\{ {\begin{array}{*{20}{c}}{{\omega _1} = ({L_X} - {L_Y})/r}\\{{\omega _2} = ({L_X} + {L_Y})/r}\\{{\omega _3} = ({L_X} + {L_Y})/r}\\{{\omega _4} = ({L_X} - {L_Y})/r}\end{array}} \right.\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:\:(4-11)$$<p>通过公式(4-10)对移动机器人平台进行验证即可得到如图3.3所示的平台运动状态，并最终确定建立的机器人移动平台数学模型正确。</p><p><img src="/2021/09/01/mecanum-kinematics/motation.svg" alt="图3.3 平台全向运动示意"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Taheri H, Qiao B, Ghaeminezhad N. Kinematic model of a four mecanum wheeled mobile robot[J]. International journal of computer applications, 2015, 113(3): 6-9.</li><li>孙全胜. 基于STM32单片机的麦克纳姆轮小车设计[J]. 现代信息科技, 2019, 003(022):P.174-175.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 麦克纳姆轮 </tag>
            
            <tag> 移动机器人学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java学习】Java入门笔记1</title>
      <link href="/2021/02/10/Java-Note-01/"/>
      <url>/2021/02/10/Java-Note-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习笔记（1）"><a href="#Java学习笔记（1）" class="headerlink" title="Java学习笔记（1）"></a>Java学习笔记（1）</h1><h2 id="1-1-什么是JDK、JRE、JVM"><a href="#1-1-什么是JDK、JRE、JVM" class="headerlink" title="1.1 什么是JDK、JRE、JVM"></a>1.1 什么是JDK、JRE、JVM</h2><p><strong>JVM</strong>(Java Virtual Machine): Java虚拟机，简称JVM，是运行所有Java程序的假象计算机，是Java运行环境，同时也是Java最具吸引力的特征之一。<strong>我们编写的Java代码都将运行在JVM之上</strong>。</p><p><strong>JRE</strong>(Java Runtime Environment):是Java程序的运行环境，包含<code>JVM</code>和运行时所需要的<strong>核心类库</strong>。</p><p><strong>JDK</strong>(Java Development Kit):是Java程序开发工具包，包含<code>JRE</code>和开发人员使用的工具。</p><p><strong>我们想要运行一个已有的Java程序，那么只需要安装<code>JRE</code>即可。</strong></p><p><strong>我们想要开发一个全新的Java程序，那么必须安装<code>JDK</code>。</strong></p><h2 id="1-2-环境配置"><a href="#1-2-环境配置" class="headerlink" title="1.2 环境配置"></a>1.2 环境配置</h2><p><strong>JDK下载地址：</strong><a href="https://www.oracle.com/java/technologies/javase-downloads.html">官方下载</a><br>安装即可</p><h2 id="1-3-第一个Java程序：HelloWorld"><a href="#1-3-第一个Java程序：HelloWorld" class="headerlink" title="1.3 第一个Java程序：HelloWorld"></a>1.3 第一个Java程序：HelloWorld</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好环境变量后，可以通过打开<strong>CMD</strong>进行编译，在Java源代码<code>HelloWorld.java</code>根目录下运行代码：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><br>将生成一个Java类文件<code>HelloWorld.class</code>，这就是Java的编译文件，随后通过运行命令提示符代码：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><br>即可看到程序输出的<code>Hello, World!</code>字段。</p><h2 id="1-4-Java程序的注释"><a href="#1-4-Java程序的注释" class="headerlink" title="1.4 Java程序的注释"></a>1.4 Java程序的注释</h2><p>与C语言注释一致，具体可参照C语言注释方法，在此不再赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一行的HelloWorld必须与其文件名一致，区分大小写</span></span><br><span class="line"><span class="comment">// public class后面代表定义一个类的名称，类是Java当中所有源代码的基本组织单位。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第二行的内容是万年不变的main方法</span></span><br><span class="line">    <span class="comment">// 这一行代表程序执行起点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">/* 对系统输出字符</span></span><br><span class="line"><span class="comment">    Hello, World!</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-标识符"><a href="#1-5-标识符" class="headerlink" title="1.5 标识符"></a>1.5 标识符</h2><p>其命名规则与C语言基本相同，可包含<strong>26个大小写字母、0-9数字、美元符号<code>$</code>和下划线。</strong></p><h2 id="1-6-Java常量"><a href="#1-6-Java常量" class="headerlink" title="1.6 Java常量"></a>1.6 Java常量</h2><p><strong>常量分类：</strong></p><ol><li>字符型常量：凡是用双引号引起来的部分，叫做字符串常量。例如：”abc”、”Hello”、”123”；</li><li>整数常量：直接写上的数字，没有小数点。例如：100、200、0、-250；</li><li>浮点数常量：直接写上的数字，有小数点。例如：2.5、-3.14、0.0；</li><li>字符常量：凡是用单引号引起来的单个字符。例如：’A’、’b’、’9’、’中’；</li><li>布尔常量：只有两种取值。true、false；</li><li>空常量：代表没有任何数据，用null表示。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Const</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 字符串常量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>); <span class="comment">//字符串两个双引号中间内容为空</span></span><br><span class="line">        System.out.println(<span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 整数常量</span></span><br><span class="line">        System.out.println(<span class="number">30</span>);</span><br><span class="line">        System.out.println(-<span class="number">500</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符常量</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(&#x27;&#x27;); </span></span><br><span class="line">        <span class="comment">//System.out.println(&#x27;AB&#x27;);//两个单引号中间必有且仅有一个字符，没有不行，两个也不行！</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//布尔常量</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//空常量，不能直接用来打印输出</span></span><br><span class="line">        <span class="comment">//System.out.println(null);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-基本数据类型"><a href="#1-7-基本数据类型" class="headerlink" title="1.7 基本数据类型"></a>1.7 基本数据类型</h2><p>Java的数据类型可以分为以下两大类：</p><ul><li><strong>基本数据类型：</strong> 包括<code>整数</code>、<code>浮点数</code>、<code>字符</code>、<code>布尔</code>。</li><li><strong>引用数据类型：</strong> 包括<code>类</code>、<code>数组</code>、<code>接口</code>。</li></ul><p>四类八种数据类型如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">数据类型</th><th style="text-align:left">关键字</th><th style="text-align:left">内存占用</th><th style="text-align:left">取值范围</th></tr></thead><tbody><tr><td style="text-align:left">字节型</td><td style="text-align:left">byte</td><td style="text-align:left">1个字节</td><td style="text-align:left">-128~127</td></tr><tr><td style="text-align:left">短整型</td><td style="text-align:left">short</td><td style="text-align:left">2个字节</td><td style="text-align:left">-32768~32767</td></tr><tr><td style="text-align:left">整型</td><td style="text-align:left">int(Default)</td><td style="text-align:left">4个字节</td><td style="text-align:left">-2的31次方到2的31次方-1</td></tr><tr><td style="text-align:left">长整型</td><td style="text-align:left">long</td><td style="text-align:left">8个字节</td><td style="text-align:left">-2的63次方到2的63次方-1</td></tr><tr><td style="text-align:left">单精度浮点数</td><td style="text-align:left">float</td><td style="text-align:left">4个字节</td><td style="text-align:left">1.4013E-45~3.4028E+38</td></tr><tr><td style="text-align:left">双精度浮点数</td><td style="text-align:left">double(Default)</td><td style="text-align:left">8个字节</td><td style="text-align:left">4.9E-324~1.7977E+308</td></tr><tr><td style="text-align:left">字符型</td><td style="text-align:left">char</td><td style="text-align:left">2个字节</td><td style="text-align:left">0~65535</td></tr><tr><td style="text-align:left">布尔型</td><td style="text-align:left">boolean</td><td style="text-align:left">1个字节</td><td style="text-align:left">true false</td></tr></tbody></table></div><p>Java中的默认类型：整数类型是<code>int</code>、浮点类型是<code>double</code>。以下代码则进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变量类型测试Demo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Varible</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个变量</span></span><br><span class="line">        <span class="comment">// 格式：数据类型 变量名称；</span></span><br><span class="line">        <span class="keyword">int</span> num1;</span><br><span class="line">        <span class="comment">// 向变量中存入一个数据</span></span><br><span class="line">        <span class="comment">// 格式：变量名称 = 数据值;</span></span><br><span class="line">        num1 = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num1); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变变量中本来的数字，变成新的数字</span></span><br><span class="line">        num1 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(num1); <span class="comment">// 20</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用一步到位的格式来定义变量</span></span><br><span class="line">        <span class="comment">// 格式：数据类型 变量名称 = 数据值;</span></span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">25</span>;</span><br><span class="line">        System.out.println(num2); <span class="comment">// 25</span></span><br><span class="line">        </span><br><span class="line">        num2 = <span class="number">35</span>;</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> num3 = <span class="number">30</span>; <span class="comment">//注意：右侧数值范围不能超过左侧数据类型的取值范围</span></span><br><span class="line">        System.out.println(num3); <span class="comment">// 30</span></span><br><span class="line">        <span class="comment">//byte num4 = 400; // 右侧超出了byte数据范围，错误</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 短整型</span></span><br><span class="line">        <span class="keyword">short</span> num5 = <span class="number">50</span>;</span><br><span class="line">        System.out.println(num5);  <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 长整型</span></span><br><span class="line">        <span class="keyword">long</span> num6 = <span class="number">3000000000L</span>;</span><br><span class="line">        System.out.println(num6); <span class="comment">// 3000000000</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 浮点型</span></span><br><span class="line">        <span class="keyword">float</span> num7 = <span class="number">2.5F</span>;</span><br><span class="line">        System.out.println(num7); <span class="comment">//2.5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 双精度浮点型</span></span><br><span class="line">        <span class="keyword">double</span> num8 = <span class="number">1.2</span>;</span><br><span class="line">        System.out.println(num8); <span class="comment">//1.2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符型</span></span><br><span class="line">        <span class="keyword">char</span> chara1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        System.out.println(chara1); <span class="comment">// A</span></span><br><span class="line">        chara1 = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        System.out.println(chara1); <span class="comment">// 中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔型</span></span><br><span class="line">        <span class="keyword">boolean</span> var1 = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(var1); <span class="comment">// true</span></span><br><span class="line">        var1 = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(var1); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个变量的数据内容，赋值交给另一个变量</span></span><br><span class="line">        <span class="comment">// 右侧的变量名称var1已经存在，里面装的是false布尔值</span></span><br><span class="line">        <span class="comment">// 将右侧变量里面的false值，向左交给var2变量进行储存</span></span><br><span class="line">        <span class="keyword">boolean</span> var2 = var1;</span><br><span class="line">        System.out.println(var2); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量使用注意事项：</strong></p><ol><li>如果创建多个变量，那么变量之间的名称不可以重复；</li><li>对于float和long类型来说，字母后缀F和L不能丢掉；</li><li>如果使用byte或者short类型的变量，那么右侧的数据值不能超过左侧类型的范围；</li><li>没有进行赋值的变量不能直接使用，一定要赋值后才能使用；</li><li>变量使用不能超过作用域的范围。<br><strong>【作用域】</strong> 从定义变量的一行开始，一直到直接所属的大括号结束为止。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习手记】基于AT89C52单片机的PID直流电机控制系统仿真</title>
      <link href="/2021/01/31/PID-DCMotor-Simulate/"/>
      <url>/2021/01/31/PID-DCMotor-Simulate/</url>
      
        <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>有刷直流电机控制系统是指对有刷电机的启动、加速、运转、减速及停止进行的控制的一种系统。直流电机发展起步于二十世纪七八十年代，MAC无刷直流电机问世，带动了直流电动机控制技术在国际范围内的发展。我国国内也开始对直流电机展开广泛研究，先后推出了方波无刷电机、正弦波直流电机等典型的直流电机<sup>[1]</sup>。如今不同的电机控制方法开始出现，其中以矢量控制、PID控制、模糊控制和鲁棒控制最为常用。在工业生产生活中，直流电机控制系统主要应用于交通、智能制造、能源开采和尖端控制等领域<sup>[2]</sup>。PID控制是电机控制中不可获取的一种控制算法，实现简单，控制精度好，稳定性高，经常运用在各种加工机床等生产设备中。使用PID算法对PWM脉宽进行调制是一种很好的有刷直流电机控制的解决方案，在本方案中本文将使用AT89C52平台进行仿真，AT89C52是基于8051框架下构建的单片机芯片；其价格低廉，开发方便，稳定性较好，经常运用于嵌入式电机控制系统中。</p><h2 id="2-有刷直流控制系统的设计"><a href="#2-有刷直流控制系统的设计" class="headerlink" title="2. 有刷直流控制系统的设计"></a>2. 有刷直流控制系统的设计</h2><p>本文所介绍的基于<code>AT89C52</code>单片机的PID直流电机控制系统设计过程主要分为MATLAB建模、Proteus硬件电路的设计以及基于C51语法的单片机程序开发编写。本系统性质为单闭环控制，即通过转速对电机进行调速，控制方框图如图1所示；<strong>将采用增量式编码器进行电机转速的测量，并设定PWM波形生成的开关频率为7KHz，速度回路的采样周期为14ms。</strong><br><img src="/2021/01/31/PID-DCMotor-Simulate/t1.png" alt="图1 单闭环控制框图"></p><h3 id="2-1-电机选型"><a href="#2-1-电机选型" class="headerlink" title="2.1 电机选型"></a>2.1 电机选型</h3><p>在MATLAB建模过程本文将基于MATLAB R2019A进行建模，首先进行电机的数学建模。本文采用的电机参数如图2所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t2.png" alt="图2 采用的电机数据"></p><h3 id="2-2-电机建模计算"><a href="#2-2-电机建模计算" class="headerlink" title="2.2 电机建模计算"></a>2.2 电机建模计算</h3><p>在此可参考博客<a href="https://www.zmtblog.site/2020/07/11/motor-singleLoop/">【学习手记】单闭环直流调速控制系统及Matlab仿真</a>进行建模计算，在此不再过多赘述。</p><h2 id="3-Proteus仿真设计"><a href="#3-Proteus仿真设计" class="headerlink" title="3. Proteus仿真设计"></a>3. Proteus仿真设计</h2><p>本文使用的电气仿真平台为英国Lab Center Electronics公司出版的EDA工具软件<code>Proteus 8.7 SP3</code>。其中硬件需要使用<code>Atmel AT89C52</code>芯片进行控制，需要进行电路图的绘制。软件部分可利用C51语法对MCU进行控制。整个调速系统所需要具备的功能是将设定转速与实际转速显示出来，需要有按对电机启停、加速、减速、正反转进行控制，需要PID算法对电机进行调速。</p><h3 id="3-1-硬件部分"><a href="#3-1-硬件部分" class="headerlink" title="3.1 硬件部分"></a>3.1 硬件部分</h3><p>在设计中，需要的硬件有AT89C52单片机、74LS30与门、共阴极四连级数码管、12MHz晶振、74393计数器、74S688数值比较器、D触发器74LS74、74LS245片选芯片、意法半导体驱动芯片L298、电机、电阻电容按键若干。整体电路分为两个部分，分别为主控制器部分，显示电路部分以及PWM产生电路。</p><p>主控制器与晶振于XTAL1与XTAL2引脚相连；复位引脚与复位按键相连接，为低电平复位；P0引脚与74LS245片选芯片相连接；P1引脚与74S688的比较口P0-P7相连；P2引脚与两个数码管的数据接口（A-G，DP）相连；P3.0与P3.1口分别连接驱动芯片的方向控制接口IN1与IN2相连；P3.2口作为外部中断接口，与电机的增量式编码器相连；P3.3作为PWM输出控制口与计数器74393的MR口相连；P3.4-P3.7分别作为按键接口接收外部信号，分别代表了启停按键、加速按键、减速按键、正反转按键，如图3.1所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t3.1.jpg" alt="图3.1 主控部分电路原理图"><br>控制系统的PWM生成电路如图3.2所示。首先设置信号源的开关频率为7KHz，并与计数器74393A的CLK计数接口相连，并将74393A的高位Q3与74393B的CLK相连接，这样就构造成了一个8位计数器，计数范围为0到255之间。分别让计数器的Q0至Q7与数值比较器的Q0至Q7相连。这样若数值比较器的P0-P7口与Q0-Q7口二进制数相等时，则比较器的PQ口则产生一个高电平脉冲信号传递到D触发器的CLK引脚，这样D触发器Q引脚就会维持一个高电平，直到Q0-Q7到达255最高值时，与门7430就会产生一个高电平信号，使D触发器的Q引脚重置为低电平。计数器会让Q0至Q7的二进制数从小到大，最后有编程最小，依次循环往复，依照计数器、比较器、D触发器的有关性质与原理产生比较准确的PWM波形信号。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t3.2.jpg" alt="图3.2 电机控制电路部分原理图"><br>最终由D触发器产生的PWM波形信号与驱动芯片的ENA使能端相连接，并通过OUT1与OUT2接口来控制直流电机的运转。电机转动时，会带动增量编码器生成脉冲信号，并通过线缆连接主控的外部中断接口P3.2来反馈信号。</p><p>控制系统的显示部分如图3.3所示，其主要由两个共阴极四连级数码管与8个电阻构成，其中数码管得1-4口为片选信号，主要控制单个数码块显示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t3.3.jpg" alt="图3.3 显示部分电路原理图"></p><h3 id="3-2-软件部分"><a href="#3-2-软件部分" class="headerlink" title="3.2 软件部分"></a>3.2 软件部分</h3><p>软件部分需要完成的功能是控制PWM占空比数值的输出，晶体数码管的显示控制，电机转速的计算以及设定电机转动状态方向和PID控制算法的实现。本文选择Keil μVision5进行C51代码的编写与编译，程序源代码如附录所示。</p><p><strong>(1) 初始化函数：</strong>初始化函数为系统运行时所必需的，首先它规定了时钟的类型，计时器的时间，中断的使用以及电机的初始状态。其中单片机的时钟类型设定寄存器为TMOD，它是一个8位寄存器，分管两个时钟的设置，寄存器如图3.4所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t3.4.jpg" alt="图3.4 TMOD寄存器控制"><br>其中GATE等于0时，仅由TR0，TR1置位分别启动定时器T0、T1；GATE等于1时由外部中断引脚INT0、INT1来启动定时器T0、T1；C/T为0时为定时器；C/T为1时为计数器；M1/M0用来控制时钟的类型与工作特点。</p><p>分别用TH0与TL0设定计时器0的计时时间，可通过计算公式得到。我们用$CF$来表示单片机的晶振频率；用$Tsm$表示一个指令周期；设定延时的时间用$Td$表示。因为设定的是16位定时器，所以计数范围为0至65536，又因为AT89C52的一个指令周期为12个机器周期，所以：</p><p><math display="block"> <mtable columnalign="left"><mtr> <mtd><mi>T</mi><mi>s</mi><mi>m</mi><mo>=</mo><mn>12</mn><mo>/</mo><mi>C</mi><mi>F</mi> </mtd></mtr><mtr> <mtd><mi>M</mi><mo>=</mo><mi>T</mi><mi>d</mi><mo>/</mo><mi>T</mi><mi>s</mi><mi>m</mi> </mtd></mtr> </mtable> </math><br>由此可以得到单片机的计数数值$Bs$为：<script type="math/tex">Bs = 65536 - M</script><br>在此我设置2ms的计时器，通过公式计算出$Bs$为63536，转换为16进制为F830，并让TH0等于0xF8，TL0等于0x30。设置中断打开，电机IN1与IN2都为低电平后完成初始化。</p><p><strong>(2) 按键控制函数：</strong>分别定义全局变量CPLs、SpeedSet，他们分别代表了正反转标识和电机转动速度档位。用sbit设置P3.4-P3.7分别为按键输入口，分别代表电机启停（ON_OFF）、电机加速（UP）、电机减速（DOWN）、电机正反转（CPL）；设置P3.3端口为电机PWM波输出控制口（PWM_CL）。</p><p>检测到ON_OFF被按下，首先检测PWM_CL的高低电平状态，如果PWM_CL为高电平状态，则将PWM_CL置为低电平，并且控制电机起转；若PWM_CL为低电平，则控制IN1与IN2同时输出高电平让电机急停，并将PWM_CL置为高电平。检测到UP被按下，则增加SpeedSet的转速档位。检测到DOWN被按下，则减小SpeedSet的转速档位。若检测到CPL按键被按下，若IN1为高电平，IN2为低电平，则进行反转，反之亦然。</p><p><strong>（3）晶体管显示函数：</strong>定义Num_Buffer为一个8位整数型数组，用于储存设定转速值与真实转速值。将SpeedSet设定值分别除1000至10，并进行取余计算则可以得到每个位的数值。</p><p><strong>（4）计数脉冲中断：</strong>主要由外部中断完成，每次接收到外部中断，也就是电机测速传来的脉冲信号，则该中断会让全局变量Inpluse加1。</p><p><strong>（5）PID算法函数：</strong>输入电设定转速值和电机的真实的转速值，利用目标值减去实际值得到误差值，积分误差则是将前一个积分误差与误差值相加，微分误差为误差值减去上一个误差值；随后分别用误差值、积分误差和微分误差乘与比例系数、积分系数和微分系数，并将这些值加和，得到输出的PID控制数值。</p><p><strong>（6）计时器0代码：</strong>分别进行晶体数码管的巡回显示，并且计算电机转速和输出电机的控制占空比数值。</p><p><strong>（7）主函数：</strong>先进行系统的初始化，随后进入一个死循环，不断的执行按键设定函数与屏幕刷新函数的执行。</p><h2 id="4-仿真结果"><a href="#4-仿真结果" class="headerlink" title="4. 仿真结果"></a>4. 仿真结果</h2><p>经过Proteus的仿真，我们可以得到转速为150、270、330、450时的模拟情况，它们都是动态稳定的。设定的PID参数值分别为7、14、1。转速为150时的模拟图像如图4.1所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t4.1.png" alt="图4.1 转速为150时仿真图像"><br>转速为270的模拟图像如图4.2所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t4.2.jpg" alt="图4.2 转速为270时的仿真图像"><br>转速为330的模拟图像如图4.3所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t4.3.jpg" alt="图4.3 转速为330时的仿真图像"><br>转速为450的模拟图像如图4.4所示。<br><img src="/2021/01/31/PID-DCMotor-Simulate/t4.4.jpg" alt="图4.4 转速为450时的仿真图像"></p><h2 id="5-总结与展望"><a href="#5-总结与展望" class="headerlink" title="5. 总结与展望"></a>5. 总结与展望</h2><p>本文设计了一种基于AT89C52单片机的PID有刷直流电机控制系统，主要介绍了控制系统从电机选型、电机建模到MATLAB仿真再到Proteus电路仿真的过程。比较系统的梳理了从理论研究到硬件软件开发的过程。</p><p>通过MATLAB我们可以实现对电机系统的初步探究，并且测试其可行性，可以将电机与控制系统进行模型的简化方便计算。通过Proteus可以进行具体的数字电路仿真，有着非常强的实践性，可以更加深入的进行可行性的探究，错误的纠正，偏差的调校，可以极大的减少制板与电路的错误率，可以在生产生活中帮助人们减轻成本，节约时间，增加开发的效率。</p><p>单片机技术在控制领域不可或缺，拥有着极大的发展前景，随着科技的发展，现代MCU的引脚功能越来越多，例如新发展的勘智K210边缘芯片的算力已达到1Tops，且功耗只有300mW，它可以进行人工智能领域的开发。如今新的处理器框架例如RISC-V精简指令集可以大大节约处理器计算性能，增大MCU的计算效率等。</p><p>随着新技术不断创新，随着电子计算机技术在我国的不断发展，直流电机控制系统也必将不断发展，并迎来新的突破，效率在不断提升的同时，运行成本会逐渐下降。如今科学技术不断进步，新材料、新技术也在不断提出、创新与应用，在未来，现代电机控制技术也必然会与材料、技术领域密切融合，取得更好发展。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] 肖华锋,王晓标,张兴,王政,花为,程明.非隔离光伏并网逆变技术的现状与展望[J].中国电机工程学报,2020,40(04):1038-1054+1397.</p><p>[2] 赵靖,曾灵飞.现代电机控制技术的发展现状及展望[J].时代汽车,2020(07):22-23.</p><p>[3] 胡寿松.自动控制原理(第5版)[M].科学出版社,2007.</p><p>[4] 范影乐,杨胜天,李轶.MATLAB仿真应用详解[M].人民邮电出版社,2001.</p><p>[5] 张崇巍,李汉强.运动控制系统[M].武汉理工大学出版社,2002.1.</p><p>[6] 刘陆.基于MATLAB直流电动机控制系统的建模与仿真[J].兰州工业学院学报,2014,21(01):14-17.</p><p>[7] 熊颖,乌泽.应用于直流电机控制的PID算法设计[J].电子世界,2020(06):109.</p><p>[8] 牛慧敏,常青,王耀力.永磁无刷直流电机调速系统优化控制[J].计算机仿真,2018,35(12):185-190.</p><p>[9] Science - Measurement and Control Sciences; Researchers’ Work from Changsha University of Science and Technology Focuses on Measurement and Control Sciences (Determination of Modeling Parameters for a Brushless Dc Motor That Satisfies the Power Performance of an Electric Vehicle)[J]. Electronics Newsweekly,2020.</p><p>[10] 张东力.直流拖动控制系统[M],机械工业出版社,2015.</p><hr><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>相关程序以及Proteus仿真电路文件已上传至个人Github，可点击下面连接查看：<br><a href="https://github.com/JimmyLiang-lzm/Simulation-of-PID-DC-Motor">https://github.com/JimmyLiang-lzm/Simulation-of-PID-DC-Motor</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 控制系统 </tag>
            
            <tag> 直流电机 </tag>
            
            <tag> Proteus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习手记】MATLAB与机器人仿真项目训练</title>
      <link href="/2021/01/30/Matlab_Robot_simulation/"/>
      <url>/2021/01/30/Matlab_Robot_simulation/</url>
      
        <content type="html"><![CDATA[<h2 id="一、4-DOF-MICO串联机器人正逆解"><a href="#一、4-DOF-MICO串联机器人正逆解" class="headerlink" title="一、4-DOF MICO串联机器人正逆解"></a>一、4-DOF MICO串联机器人正逆解</h2><h3 id="1-4-DOF-MICO串联机器人系统介绍"><a href="#1-4-DOF-MICO串联机器人系统介绍" class="headerlink" title="1. 4-DOF MICO串联机器人系统介绍"></a>1. 4-DOF MICO串联机器人系统介绍</h3><p>机器人基本技术参数设计主要是根据设计任务和功能要求，来确定以下主要性能参数:机器人的用途:根据设计要求，所设计的机器人主要用于柔性制造系统中刀具更换、工件运送和装配。机器人的负载能力:机器人末端执行器持重为: 2kg。 末端执行器与本体之间以接口的形式连接以便对多种末端执行器进行替换。<br>传动系统设计是机器人设计过程中最主要的设计问题之一。机器入的传动系统除采用齿轮、蜗轮蜗杆和行星齿轮传动外，还广泛采用滚珠丝杠、谐波减速装置和绳轮钢带等传动装置。如果机器人的成本允许，传动系统应避免自己加工制造，尽可能采用知名厂家成熟的传动产品。传动装置在机器人的设计中是一个很重要的环节，传动的好坏直接影响到最后的控制性能。</p><p>随着机器人应用领域的不断扩大，机器人产品也正在向多品种、小批量、低成本等方向发展，这就对机器人本体的设计和生产提出了新的要求。机器人本体的设计应尽可能标准化、模块化以缩短开发和生产周期，降低生产成本。采用模块化设计还可以有效地提高设计的重用性，增加系统的可靠性，并能根据客户需要对系统进行合理配置从而满足市场的不同需求，四自由度串联机器人本体的大臂和小臂关节都是转动关节，用于实现在同一.平面内的定位，而大臂和小臂也具有相似的功能。</p><p>由于四自由度串联机器人相当于开链式连杆结构，其臂部关节和末端执行器的结构及重量对机器人整体静、动态性能有较大的影响，从而对机器人的工作效率、稳定性和可靠性有很大影响。因此除采用轻型、高强度铝合金材料外，还应设计重量较轻、刚性较好的机械结构。回转机座又称机器人的腰座，用来实现腰部回转。腰部轴系及传动链的精度和刚度对末端执行器的运动精度影响最大。因此腰座与手臂的连接要有可靠的定位基准面。腰部承受机器人全部重量和工作载荷，应具有足够的强度、刚度和承载能力。而且，为保证机器人工作的稳定性，安装基面要足够大。四自由度串联机器人的升降移动关节用于驱动机器人大臂、小臂作升降直线运动，从而实现末端执行器在垂直方向的运动。常用的直线驱动方式主要有液压驱动、气压驱动、直线电机驱动、旋转电机与丝杠螺母副联合驱动等。因滚珠丝杠螺母具有传动摩擦力矩小、传动效率高、结构紧凑、刚性好、传动精度高、工作寿命长等特点在机电一体化系统中取得了广泛应用。而由滚珠螺杆与线性滑轨构成的精密线性模组具有体积小、重量轻、高精度、高刚性、组装便利、维护容易等优点。目前已广泛应用在精密机械与其它需要精密定位的机构上。</p><p>四自由度串联型机器人的运动学模型的建立，包括机器人运动学方程的表示以及运动学正解、逆解等，这些是研究机器人控制的重要基础，也是开放式机器人系统轨迹规划的重要基础。四自由度串联型机器人操作臂可以看作是一个开式运动链。它是由一系列连杆通过转动或移动关节串联而成的。为了研究操作臂各连杆之间的位移关系，可在每个连杆上固接一个坐标系(附体坐标系)，然后描述这些坐标系之间的关系。</p><h3 id="2-正解"><a href="#2-正解" class="headerlink" title="2. 正解"></a>2. 正解</h3><h4 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h4><p>机械臂一般是由关节和连杆构成的。各关节均是可以旋转的，是线性滑动的。每一个关节都被定义为一个自由度 <strong>(DOF)</strong> 。在这个实验中，我们定义这是一个有四个可旋转的关节的四自由度机械臂。对机械臂连杆进行编号，从已固定的底座到最末端的机械臂连杆分别为${L_0}$、${L_1}$、${L_2}$、${L_3}$。</p><p><img src="/2021/01/30/Matlab_Robot_simulation/1.2.1.png" alt="图1.2.1连杆坐标系示意图"><br>机械臂的各个关节都有一个旋转的轴(由${Z_i}$表示，其中$i$表示关节的编号)，称为关节轴。</p><p>机械臂的每个连杆都’可看作’是-个用来定义两个相邻关节轴之间关系的刚体。参考图1.2.1中的两个相邻关节坐标系。为了确定两个固定轴(固定不动)的相对位置和方向，仅需要两个参数:<code>连杆长度和连杆扭角</code>。</p><p><strong>连杆长度${a<em>{i - 1}}$:两相邻关节$i - 1$和$i$的关节轴之间的距离(${a</em>{i - 1}}$ 所在直线垂直于关节$i - 1$和$i$的关节轴，即公共法线$Axi{s_{i - 1}}$)。</strong></p><p><strong>连杆扭角${\alpha <em>{i - 1}}$ :两相邻关节$i - 1$和$i$的关节轴之间的夹角角度(若两轴相互平行，则${\alpha </em>{i - 1}} = 0$)。</strong></p><p>如果考虑<code>附加轴</code>(3个或更多固定轴)，通常情况下，公共法线不会同时与公共轴相交。因此，需要一个新的参数来描述相邻关节轴之间的关系，即<code>连杆偏移</code>。</p><p><strong>连杆偏移${d<em>i}$:关节轴$i$相对于关节轴$i - 1$和$i + 1$的两条公共法线$Axi{s </em>{i - 1}}$和$Axi{s _i}$之间的距离。</strong></p><p>如果所有的轴都是不固定的，则还需要最后一个参数来描述相邻关节轴之间的关系，即<code>关节角度</code>。</p><p><strong>关节角度${\theta <em>i}$：关于关节轴$i$的公共法线$Axi{s </em>{i - 1}}$和$Axi{s _i}$之间的夹角角度。</strong></p><p>这四个参数(${a<em>{i - 1}}$、${\alpha </em>{i - 1}}$、${d_i}$和${\theta _i}$)是机器人的<code>Denavit-Hartenberg</code>或<code>DH参数</code>。</p><p>如前所述，为了描述每个连杆相对于其相邻连杆的位置和方向，每个连杆上都建立了一个坐标系。我们假设所有的关节都是原点，则${x_0}$轴指向机器人的前方, ${y_0}$轴指向左侧，${z_0}$轴指向上方(与关节轴对齐)。</p><p>根据以下步骤给机械臂的连杆建立坐标系：</p><p>1、给每个连杆$i$指定一个坐标系$i$;</p><p>2、${z_i}$轴就是关节轴(可旋转);</p><p>3、选择关节轴和公共法线$Axi{s <em>i}$的交点(或者若${\alpha </em>{i - 1}} = 0$，则选择关节轴$i$和$i + 1$的交点)作为坐标系$i$的原点;</p><p>4、${x<em>i}$轴沿着公共法线$Axi{s_i}$，指向关节$i+1$。如果${\alpha</em>{i - 1}} = 0$，则${x<em>i}$轴垂直于${z_i}$轴和${z</em>{i + 1}}$轴且方向任意:若${\theta<em>i} = 0$， 则最好沿着${x</em>{i - 1}}$轴选择;</p><p>5、${y_i}$轴通过右手法则来确定。</p><p>根据上述步骤建立的坐标系,${a<em>{i - 1}}$是${z</em>{i - 1}}$轴和${z<em>i}$轴之间的距离(沿${x</em>{i - 1}}$轴方向),${\alpha<em>{i - 1}}$是${z</em>{i - 1}}$轴和${z<em>i}$轴之间夹角的角度(关于${x</em>{i - 1}}$轴)，${d<em>i}$是${x</em>{i - 1}}$轴和${x<em>i}$轴之间的距离(沿${z_i}$轴方向),${\theta_i}$是${x</em>{i - 1}}$轴和${x_i}$轴之间夹角的角度(关于${z_i}$轴)。<br>将机械臂连杆所对应的坐标系相关的旋转和平移矩阵相乘后(这两个变换矩阵对应的是两个相邻坐标系$i$和$i - 1$,且使用了已定义的DH参数)，其中$c$与$s$分别代表$sin$与$cos$,所得关系为:</p><math display="block"><mrow><mmultiscripts><mi>T</mi><mprescripts><mi>i</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></mprescripts></mmultiscripts><mo>=</mo><mrow><mo>[</mo> <mrow><mtable><mtr><mtd><mrow><mi>c</mi><msub><mi>&#x03B8;</mi><mi>i</mi></msub></mrow></mtd><mtd><mrow><mo>&#x2212;</mo><mi>s</mi><msub><mi>&#x03B8;</mi><mi>i</mi></msub></mrow></mtd><mtd><mn>0</mn></mtd><mtd><mrow><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd></mtr><mtr><mtd><mrow><mi>s</mi><msub><mi>&#x03B8;</mi><mi>i</mi></msub><mi>c</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd><mtd><mrow><mi>c</mi><msub><mi>&#x03B8;</mi><mi>i</mi></msub><mi>c</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd><mtd><mrow><mo>&#x2212;</mo><mi>s</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd><mtd><mrow><mo>&#x2212;</mo><mi>s</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub><msub><mi>d</mi><mi>i</mi></msub></mrow></mtd></mtr><mtr><mtd><mrow><mi>s</mi><msub><mi>&#x03B8;</mi><mi>i</mi></msub><mi>s</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd><mtd><mrow><mi>c</mi><msub><mi>&#x03B8;</mi><mi>i</mi></msub><mi>s</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd><mtd><mrow><mi>c</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub></mrow></mtd><mtd><mrow><mi>s</mi><msub><mi>&#x03B1;</mi><mrow><mi>i</mi><mo>&#x2212;</mo><mn>1</mn></mrow></msub><msub><mi>d</mi><mi>i</mi></msub></mrow></mtd></mtr><mtr><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>0</mn></mtd><mtd><mn>1</mn></mtd></mtr></mtable></mrow> <mo>]</mo></mrow></mrow></math><h4 id="2-Matlab仿真"><a href="#2-Matlab仿真" class="headerlink" title="(2) Matlab仿真"></a>(2) Matlab仿真</h4><p>首先编写DH.m程序（程序见附录），FPK程序同，打开simulation仿真模型。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.2.png" alt="图1.2.2 系统simulation仿真模型"><br>在FPK模块输出加入几个示波器矩阵。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.3.png" alt="图1.2.3  FPK模块示意图"><br>对系统进行仿真。点击simulation菜单栏的QUARC下拉菜单Build。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.4.png" alt="图1.2.4 QUARC build选项菜单"><br>完成后点击连接即可打开Quarc3D图像。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.5.png" alt="图1.2.5 Quarc3D机械臂图像"><br>点击运行。输出如下：<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.6.png" alt="图1.2.6 输出参数矩阵"><br>修改左边输入角度参数即可改变机器人的位姿。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.7.png" alt="图1.2.7 机器人输入参数"><br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.8.png" alt="图1.2.8 修改参数后机器人图"><br>输出参数矩阵如下：<br><img src="/2021/01/30/Matlab_Robot_simulation/1.2.9.png" alt="图1.2.9 修改后机器人输出参数"><br><strong>小结：根据图1.2.6可以看出，输出与输入存在些许误差。可能是由于模型系统本身造成的。</strong></p><h3 id="3-逆解"><a href="#3-逆解" class="headerlink" title="3. 逆解"></a>3. 逆解</h3><h4 id="（1）原理-1"><a href="#（1）原理-1" class="headerlink" title="（1）原理"></a>（1）原理</h4><p>一般来说，机械臂运动学方程的求解是一个非线性、重要的问题。机械臂的末端执行器的坐标可通过其4x4的转换矩阵来表示。其中有四个元素是固定的(变换矩阵的最后一行是[0001] )，变换矩阵的其余12 个元素被分为一个3x1的位置向量和3x3的方向矩阵。另外，旋转矩阵中的9个参数不是<code>独立的</code>。<strong>一个坐标系相对于另一个坐标系的方向可用3个独立的参数来表示，这三个参数分别被称为roll(滚动,绕x轴旋转),pitch (俯仰，绕y轴旋转)，yaw (偏航，绕z轴旋转)。</strong></p><p>为了完成指定的空间姿态(x，y, z，toll, pitch, yaw)，这六个关节变量是必不可少的。因此，在使用4自由的机械臂时，其末端执行器无法按照指定的方向到达空间中的每个位置。也可以说4自由度机械臂没有灵活的工作空间，或者说没有一个可以使得末端执行器能够到达任意位置的空间量。可到达工作空间指的是机器人末端执行器至少一个方向可以到达的空间量。</p><p>对于4-DOF MICO机械臂，由于第一个关节可以移动360°，因此可以到达的工作空间为：<script type="math/tex">({x^2} + {y^2} + {(z - ({L_0} + {L_1}))^2}) \le {L_2} + {L_3} + {L_4}</script>需要注意${x^2} + {y^2} + {(z - ({L_0} + {L_1}))^2}$为末端执行器与坐标系J2 (关节2)的原点间的距离。如果这个距离大于连杆2, 3和4的长度和，则机械臂无法到达这个位置。因此，只要是满足上述不等式空间的所有点，且产生的关节角度不超过物理限制，我们都可以得到一个对应的解。对于4-DOF MICO机械臂,关节2的角度限制为$ - {220^ \circ } &lt; {\theta _2} &lt; {40^ \circ }$,关节3的角度限制为$ - {230^ \circ } &lt; {\theta _3} &lt; {50^ \circ }$。</p><p>在本实验中，我们对机械臂末端执行器不同位置可能对应的关节位置进行了求解，并研究了可能的方向。机械臂末端执行器所需的三个变量:$x$，$y$和$z$。查看图1.3.1中的机械臂示意图(侧视图)，机械臂最后一个关节(J)的变化不会影响末端执行器的位置，只会改变末端执行器的方向。所以，最终我们只需要求解已给定$x$，$y$和$z$的前三个关节角度(${\theta_1}$，${\theta_2}$和${\theta_3}$)。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.3.1.png" alt="图1.3.1 4-DOF MICO机械臂的2D侧视图和俯视图"><br>机器人逆向运动学的解法有两种:数值解法和封闭解法。数值解法会给出关节变量的具体数值。封闭算法是使用代数方程或几何计算得到的表达式。在这里我们提供了使用几何计算的封闭算法解决方案。</p><p>逆向运动学的几何解法是-一种直接且简单的算法，用于求解给定的末端执行器位置所对应的关节角度。在这个算法中，我们尝试将机械臂的空间几何分解为简单的平面几何问题。当第一个关节(J1)改变时，4-DOF MICO机械臂的运动可以被分解为一个移动的平面，该平面绕z轴旋转。图1.3.1中是机械臂的两个不同视角下的平面图。左图是移动平面的侧视图，右图是俯视图。</p><p>根据图1.3.1中的侧视图，可以推导出$r$和$z$,如下所示:</p><script type="math/tex; mode=display">r = ({L_2}cos({\theta _2})) - ({L_3} + {L_4})sin({\theta _2} + {\theta _3}))$$$$z = {L_0} + {L_1} - {L_2}\sin ({\theta _2}) - ({L_3} + {L_4})cos({\theta _2} + {\theta _3})</script><p>根据图1.3.1中的俯视图，可以推导出$x$和$y$，如下所示:</p><script type="math/tex; mode=display">x = r\cos ({\theta _1})$$$$y = r\sin ({\theta _1})</script><p>根据上述几个式子可知：</p><script type="math/tex; mode=display">{\theta _1} = a\tan 2(x.y)</script><p>另外，根据图1.3.1中的侧视图还可以，推导出：</p><math display="block"><mrow><mi>R</mi><mo>=</mo><msqrt><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>+</mo><msup><mrow><mo stretchy="false">(</mo><mi>z</mi><mo>&#x2212;</mo><mo stretchy="false">(</mo><msub><mi>L</mi><mn>0</mn></msub><mo>+</mo><msub><mi>L</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mn>2</mn></msup></mrow></msqrt></mrow></math>要计算关节角${\theta_2}$和${\theta_3}$，首先要计算$\alpha $和$\psi $，可以使用以下公式来计算角度$\alpha $:<math display="block"> <mrow>  <mi>&#x03B1;</mi><mo>=</mo><msup>   <mrow>    <mi>tan</mi></mrow>   <mrow>    <mo>&#x2212;</mo><mn>1</mn></mrow>  </msup>  <mo stretchy="false">(</mo><mi>z</mi><mo>&#x2212;</mo><mo stretchy="false">(</mo><msub>   <mi>L</mi>   <mn>0</mn>  </msub>  <mo>+</mo><msub>   <mi>L</mi>   <mn>1</mn>  </msub>  <mo stretchy="false">)</mo><mo>,</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><mi>t</mi><mi>a</mi><msup>   <mi>n</mi>   <mrow>    <mo>&#x2212;</mo><mn>1</mn></mrow>  </msup>  <mfrac>   <mrow>    <mi>z</mi><mo>&#x2212;</mo><mo stretchy="false">(</mo><msub>     <mi>L</mi>     <mn>0</mn>    </msub>    <mo>+</mo><msub>     <mi>L</mi>     <mn>1</mn>    </msub>    <mo stretchy="false">)</mo></mrow>   <mrow>    <msqrt>     <mrow>      <msup>       <mi>x</mi>       <mn>2</mn>      </msup>      <mo>+</mo><msup>       <mi>y</mi>       <mn>2</mn>      </msup>      </mrow>    </msqrt>    </mrow>  </mfrac>  </mrow></math>其中，${\tan ^{ - 1}}$是用atan2命令来计算的。给定了$x$,$y$和$z$,要计算$\psi $,需要使用余弦定理。余弦定理，也成为余弦公式或余弦法则，表示了三角形的边长和其中一个角度的余弦之间的关系，如图1.3.2所示，其中${c^2} = {a^2} + {b^2} - 2ab\cos \gamma $。![图1.3.2 余弦定理](1.3.2.png)将余弦定理应用到由$R$，${L_2}$，${L_3}+{L_4}$和角度$\psi $表示的三角形上，可以得到:<math display="block"> <mrow>  <msup>   <mrow>    <mrow><mo>(</mo>     <mrow>      <msub>       <mi>L</mi>       <mn>3</mn>      </msub>      <mo>+</mo><msub>       <mi>L</mi>       <mn>4</mn>      </msub>      </mrow>    <mo>)</mo></mrow></mrow>   <mn>2</mn>  </msup>  <mo>=</mo><msup>   <mi>R</mi>   <mn>2</mn>  </msup>  <mo>+</mo><msup>   <mi>L</mi>   <mn>2</mn>  </msup>  <mo>&#x2212;</mo><mn>2</mn><msub>   <mi>L</mi>   <mn>2</mn>  </msub>  <mi>R</mi><mi>cos</mi><mi>&#x03C8;</mi><mo>&#x21D2;</mo><mi>&#x03C8;</mi><mo>=</mo><msup>   <mrow>    <mi>cos</mi></mrow>   <mrow>    <mo>&#x2212;</mo><mn>1</mn></mrow>  </msup>  <mrow><mo>(</mo>   <mrow>    <mfrac>     <mrow>      <msup>       <mi>R</mi>       <mn>2</mn>      </msup>      <mo>+</mo><msup>       <mi>L</mi>       <mn>2</mn>      </msup>      <msub>       <mrow></mrow>       <mn>2</mn>      </msub>      <mo>&#x2212;</mo><mrow><mo>(</mo>       <mrow>        <msub>         <mi>L</mi>         <mn>3</mn>        </msub>        <mo>+</mo><msub>         <mi>L</mi>         <mn>4</mn>        </msub>        </mrow>      <mo>)</mo></mrow></mrow>     <mrow>      <mn>2</mn><msub>       <mi>L</mi>       <mn>2</mn>      </msub>      <mi>R</mi></mrow>    </mfrac>    </mrow>  <mo>)</mo></mrow></mrow></math>其中R参考公式:<math display="block"> <mrow>  <mi>R</mi><mo>=</mo><msqrt>   <mrow>    <msup>     <mi>r</mi>     <mn>2</mn>    </msup>    <mo>+</mo><msup>     <mrow>      <mo stretchy="false">(</mo><mi>z</mi><mo>&#x2212;</mo><mo stretchy="false">(</mo><msub>       <mi>L</mi>       <mn>0</mn>      </msub>      <mo>+</mo><msub>       <mi>L</mi>       <mn>1</mn>      </msub>      <mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow>     <mn>2</mn>    </msup>    </mrow>  </msqrt>  </mrow></math>同样的，将余弦定理应用到由$R$，${L_2}$，${L_3} + {L_4}$和角度$\frac{\pi }{2} - {\theta _3}$表示的三角形上，可以得到：<math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>3</mn></msub><mo>=</mo><msup> <mrow><mi>sin</mi></mrow> <mrow><mo>&#x2212;</mo><mn>1</mn></mrow></msup><mrow><mo>(</mo> <mrow><mfrac> <mrow><msup> <mi>L</mi> <mn>2</mn></msup><msub> <mrow></mrow> <mn>2</mn></msub><mo>+</mo><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>3</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>4</mn></msub></mrow><mo>)</mo></mrow><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><msup> <mi>x</mi> <mn>2</mn></msup><mo>+</mo><msup> <mi>y</mi> <mn>2</mn></msup><mo>+</mo><msup> <mrow><mrow><mo>(</mo> <mrow><mi>z</mi><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><msub><mi>L</mi><mn>0</mn></msub><mo>+</mo><msub><mi>L</mi> <mn>1</mn></msub></mrow><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow> <mn>2</mn></msup></mrow><mo>)</mo></mrow></mrow> <mrow><mn>2</mn><msub> <mi>L</mi> <mn>2</mn></msub><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>3</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>4</mn></msub></mrow><mo>)</mo></mrow></mrow></mfrac></mrow><mo>)</mo></mrow></mrow></math>现在，根据图1.3.1可以得到以下两组关节角度的解，第一组解：<math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>1</mn></msub><mo>=</mo><msup> <mrow><mi>tan</mi></mrow> <mrow><mo>&#x2212;</mo><mn>1</mn></mrow></msup><mrow><mo>(</mo> <mrow><mfrac bevelled="true"> <mi>y</mi> <mi>x</mi></mfrac></mrow><mo>)</mo></mrow></mrow></math><math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>2</mn></msub><mo>=</mo><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><mi>&#x03B1;</mi><mo>+</mo><mi>&#x03C8;</mi></mrow><mo>)</mo></mrow></mrow></math><math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>3</mn></msub><mo>=</mo><msup> <mrow><mi>sin</mi></mrow> <mrow><mo>&#x2212;</mo><mn>1</mn></mrow></msup><mrow><mo>(</mo> <mrow><mfrac> <mrow><msup> <mi>L</mi> <mn>2</mn></msup><msub> <mrow></mrow> <mn>2</mn></msub><mo>+</mo><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>3</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>4</mn></msub></mrow><mo>)</mo></mrow><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><msup> <mi>x</mi> <mn>2</mn></msup><mo>+</mo><msup> <mi>y</mi> <mn>2</mn></msup><mo>+</mo><msup> <mrow><mrow><mo>(</mo> <mrow><mi>z</mi><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>0</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>1</mn></msub></mrow><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow> <mn>2</mn></msup></mrow><mo>)</mo></mrow></mrow> <mrow><mn>2</mn><msub> <mi>L</mi> <mn>2</mn></msub><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>3</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>4</mn></msub></mrow><mo>)</mo></mrow></mrow></mfrac></mrow><mo>)</mo></mrow></mrow></math>第二组解：<math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>1</mn></msub><mo>=</mo><msup> <mrow><mi>tan</mi></mrow> <mrow><mo>&#x2212;</mo><mn>1</mn></mrow></msup><mrow><mo>(</mo> <mrow><mfrac bevelled="true"> <mi>y</mi> <mi>x</mi></mfrac></mrow><mo>)</mo></mrow></mrow></math><math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>2</mn></msub><mo>=</mo><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><mi>&#x03B1;</mi><mo>&#x2212;</mo><mi>&#x03C8;</mi></mrow><mo>)</mo></mrow></mrow></math><math display="block"> <mrow><msub> <mi>&#x03B8;</mi> <mn>3</mn></msub><mo>=</mo><mo>&#x2212;</mo><mi>&#x03C0;</mi><mo>&#x2212;</mo><msup> <mrow><mi>sin</mi></mrow> <mrow><mo>&#x2212;</mo><mn>1</mn></mrow></msup><mrow><mo>(</mo> <mrow><mfrac> <mrow><msup> <mi>L</mi> <mn>2</mn></msup><msub> <mrow></mrow> <mn>2</mn></msub><mo>+</mo><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>3</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>4</mn></msub></mrow><mo>)</mo></mrow><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><msup> <mi>x</mi> <mn>2</mn></msup><mo>+</mo><msup> <mi>y</mi> <mn>2</mn></msup><mo>+</mo><msup> <mrow><mrow><mo>(</mo> <mrow><mi>z</mi><mo>&#x2212;</mo><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>0</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>1</mn></msub></mrow><mo>)</mo></mrow></mrow><mo>)</mo></mrow></mrow> <mn>2</mn></msup></mrow><mo>)</mo></mrow></mrow> <mrow><mn>2</mn><msub> <mi>L</mi> <mn>2</mn></msub><mrow><mo>(</mo> <mrow><msub> <mi>L</mi> <mn>3</mn></msub><mo>+</mo><msub> <mi>L</mi> <mn>4</mn></msub></mrow><mo>)</mo></mrow></mrow></mfrac></mrow><mo>)</mo></mrow></mrow></math><h4 id="2-Matlab仿真-1"><a href="#2-Matlab仿真-1" class="headerlink" title="(2) Matlab仿真"></a>(2) Matlab仿真</h4><p>首先编写DH.m程序（程序见附录），FPK程序同，打开simulation仿真模型。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.3.3.png" alt="图1.3.3 系统simulation仿真模型"><br>对系统进行仿真。点击simulation菜单栏的QUARC下拉菜单Build。完成后点击连接即可打开Quarc3D图像，将输入打到P1，点击运行。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.3.4.png" alt="图1.3.4 Quarc仿真图像"><br><img src="/2021/01/30/Matlab_Robot_simulation/1.3.5.png" alt="图1.3.5 输出参数矩阵"><br>修改左边输入角度参数即可改变机器人的位姿。$x = 0.3$，$y = 0.3$，$z = 0$。<br><img src="/2021/01/30/Matlab_Robot_simulation/1.3.6.png" alt="图1.3.6 修改后机器人位姿示意图"><br><img src="/2021/01/30/Matlab_Robot_simulation/1.3.7.png" alt="图1.3.7 修改机器人输出参数"><br><strong>小结：机器人逆解模型就是在正解的基础上加上逆解程序，机器人的逆解输出也用于正解。逆解存在两个输入类型，可以在P0、P1之间切换。</strong></p><h2 id="二、机械臂逆解算法改进与仿真"><a href="#二、机械臂逆解算法改进与仿真" class="headerlink" title="二、机械臂逆解算法改进与仿真"></a>二、机械臂逆解算法改进与仿真</h2><p>根据任务要求查阅资料我们决定使用机器人工具包进行逆解算法的改进工作。我们使用Link函数对机器人的各个参数进行程序的编写。其中，p为机器人的位姿，q为机器人输出的关节角。<br><img src="/2021/01/30/Matlab_Robot_simulation/2.1.1.png" alt="图2.1.1 逆解优化程序"><br>新建Matlab的m文件输入上图的程序并运行。<br><img src="/2021/01/30/Matlab_Robot_simulation/2.1.2.png" alt="图2.1.2 机器人位姿示意图"><br><img src="/2021/01/30/Matlab_Robot_simulation/2.1.3.png" alt="图2.1.3 修改关节角度"><br><strong>小结：逆解优化使用机器人工具箱可以对机器人的关节角进行修改，操作相对于Quarc来说更加简便，总体来说优化任务圆满完成，实现对机械臂的便捷控制。</strong></p><h2 id="三、项目总结"><a href="#三、项目总结" class="headerlink" title="三、项目总结"></a>三、项目总结</h2><p>在大多数的机器人应用中，机器人末端执行器需要能够到达空间中一个特定的已知位置和方向，从而完成特定的任务。反向运动学解决了末端执行器为了放置到一个特定的位置而所需要的关节角度的问题。机械臂是通过模仿人的手和臂的设计进行自动操作装置，可以实现对物体的搬运、抓取等任务。它可以在恶劣的环境或是人类无法工作的情况下，代替人进行作业。因此，机械臂被广泛应用于机械制造、医疗、冶金、电子、航空航天和原子能等领域。机械臂的逆运动学问题是一个比较繁琐的过程，其求解的速度和精度能直接影响到机械臂控制的精度。因此，对机械臂的逆运动学的研究主要集中在解的存在性与逆解算法上。机械臂逆运动学的求解方法主要有:迭代法、解析法和几何法。</p><p>四自由度关节式机器人为研究对象通过经典D-H法对其进行运动学分析,并用MATLAB进行了运动学的仿真与方程计算，通过数据对比分析验证了运动学模型与运动学正逆运算的正确性。为机器人进行轨迹规划研究与仿真提供了必要的理论基础和正确的运动学模型。多关节串联机器人的逆运动学优化计算问题，在机器人学科领域,与之密切相关的技术问题包括：机械臂的轨迹规划技术，人机交互式操作控制技术,机械臂视觉伺服控制技术以及计算机虚拟现实技术等。介绍了于求解串联机器人逆运动学问题的主要数值计算方法,研究了串联机器人的结构参数建模问题,在此基础上,得到空间坐标系下机器人的位置和姿态矩阵,以及描述机器人运动关系的旋转变换矩阵。进一步得建立了以位置和姿态误差量表示的关于n-1关节串联机器人的逆运动学问题的目标函数。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]    基于MATLAB与ADAMS的机械臂仿真分析[J]. 王大超,刘虹.机械工程与自动化.2017(06).</p><p>[2]    基于Matlab与ADAMS的机械臂运动学建模与仿真[J]. 王涛,吴良凯,王春丽,孙建滨.机械工程师.2017(01).</p><p>[3]    Shimogama S. Apparatus and method for controlling an arc welding robot: U.S. Patent 6,107,601[P]. 2000-8-22.</p><p>[4]    Craig J J. Introduction to robotics: mechanics and control, 3/E[M]. Pearson Education India, 2009.</p><p>[5]    熊有伦。机器人技术基础[ M].武汉:华中理工大学出版社，1996.</p><p>[6]    韩玉强, 高秀兰多指机械手运动学模型的建立[J].机械研究与应用,2001(4):7-8.</p><p>[7]    MATLAB环境下六自由度焊接机器人运动学逆解及优化[J].王战中，杨长建，刘超颖，等.机械设计与制造，2013(7):182-184.</p><p>[8]    基于旋量理论的串联机器人逆解子问题求解算法[D].陈庆诚,朱世强,王宣银.浙江大学学报(工学版),2014(1): 8-14.</p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
          <category> Robot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学校项目 </tag>
            
            <tag> Matlab </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习手记】RobotStudio仿真项目课题</title>
      <link href="/2021/01/19/RobotStudio1/"/>
      <url>/2021/01/19/RobotStudio1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、课题介绍"><a href="#一、课题介绍" class="headerlink" title="一、课题介绍"></a>一、课题介绍</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>随着当今社会的不断发展，以工业机器人智能制造为主导的新科技浪潮不断推进，相关工业机器人的应用需求和与之伴随的相关应用型人才的需求也越来越大。在工业机器人编程与操作的实习中，本报告选择工业弧焊机器人进行展开讨论与建模仿真。因新冠疫情的因素影响，学生无法返校进行工业机器人的实际操作，故实验主要是使用SolidWorks建模软件与ABB RobotStudio仿真软件进行工作空间的搭建与仿真。<br>本次课题旨在通过RobotStudio虚拟仿真平台上搭建焊接机器人工作站的过程，让我们掌握工业机器人三维建模、离线编程、程序调试、实验仿真以及验证的有关操作。</p><h3 id="1-2-工艺要求"><a href="#1-2-工艺要求" class="headerlink" title="1.2 工艺要求"></a>1.2 工艺要求</h3><p>本次实习要求使用RobotStudio进行弧焊工业机器人的仿真，使用SolidWorks对焊件以及周边器件进行建模，需要整个工作系统能够平稳运行，能够应用于生产实践；需要考虑实际情况进行设计，不能出现穿模，碰撞等现实中不可行的方案，需要使用恰当的方式方法进行工作站的搭建。</p><h2 id="二、总体方案设计"><a href="#二、总体方案设计" class="headerlink" title="二、总体方案设计"></a>二、总体方案设计</h2><h3 id="2-1-总体方案"><a href="#2-1-总体方案" class="headerlink" title="2.1 总体方案"></a>2.1 总体方案</h3><p>总体方案如图2.1所示：</p><p><img src="/2021/01/19/RobotStudio1/2.1.png" alt="图2.1 弧焊机器人设计总体方案"></p><p>在弧焊工业机器人的仿真设计中，开始需要分为两个步骤，分别为SolidWorks建模和RobotStudio机器人的选型与工作站的初步搭建。当这两个步骤完成后，将模型导入RobotStudio中，进行机器人模型的装配并且完善场景的搭建。随后进行机器人系统的自动生成，添加相关的Smart组件，给仿真动画加上相应的反馈组件与环节。完成后，使用RobotStudio内的目标点和自动路径的创建功能生成机器人轨迹，在这个过程中要防止机器人移动到奇异点，保证工作区始终不超过机器人的活动范围。<br>完成以上搭建后进行机器人工作站的调试过程，可以通过修改RAPID有关的代码细化机器人的运动过程，检查弧焊机器人是否能够达到预想的效果，如果能达到预期的效果则完成本次的仿真设计过程，若没有达到预期效果，需要查找有关原因并记录，进行模型或代码的修改，直到达到设计要求。</p><h3 id="2-2-机器人选型与布局"><a href="#2-2-机器人选型与布局" class="headerlink" title="2.2 机器人选型与布局"></a>2.2 机器人选型与布局</h3><p>弧焊机器人的仿真部件设计构成有：IRB 1660ID机器人本体一台、Binzel ID 22焊枪一个、IRC5控制柜模块一个，CAM传感器一台，聚光灯一台，焊枪清洗器一台，焊接保护气罐一瓶，传送体一个，焊件若干，隔离保护架若干，电缆若干。</p><p>工作站布局如图2.2所示。</p><p><img src="/2021/01/19/RobotStudio1/2.2.jpg" alt="图2.2 弧焊机器人工作站布局"></p><h2 id="三、弧焊机器人工作站"><a href="#三、弧焊机器人工作站" class="headerlink" title="三、弧焊机器人工作站"></a>三、弧焊机器人工作站</h2><h3 id="3-1-SolidWorks建模"><a href="#3-1-SolidWorks建模" class="headerlink" title="3.1 SolidWorks建模"></a>3.1 SolidWorks建模</h3><p>除了RobotStudio自带的机器人与控制柜等模组之外，还需要建模的组件还有自己设置的焊件，保护气罐，聚光灯和焊枪清洗器；其中焊件的建模比较简单，利用普通的工件建模即可，其他部件都需要在工件建模的基础上进行装配。</p><p>首先打开SolidWorks软件，选择工件建模，先画草图然后进行特征的拉伸，裁切，倒圆角和打孔等操作进行建模，首先绘制好焊件的模型。随后再进行保护气罐和聚光灯零件的建模，建模并组装完成后，建模图如图3.1所示。</p><p><img src="/2021/01/19/RobotStudio1/3.1.jpg" alt="图3.1 焊件，保护气瓶，焊枪清洗器（从左到右）"></p><h3 id="3-2-弧焊机器人工作站"><a href="#3-2-弧焊机器人工作站" class="headerlink" title="3.2 弧焊机器人工作站"></a>3.2 弧焊机器人工作站</h3><p>首先需要在RobotStudio中添加一个一个RobotStudio自带的机器人模型，在此我选择的是IRB1660ID，通过ABB Industrial的官方数据可以知道这个机械手臂是专门应用于弧焊的机械手臂，它的处理能力是6kg，能到达的长度为1.55m，操作空间与数据如附录2所示。</p><p>完成机械手模型的导入，我们选择从布局创建机器人系统，在选项里面添加606-1 Conveyor Tracking和1552-1 Tracking Unit Interface的合作跟踪模块与控制系统，随后完成机器人布局的搭建。</p><p>在设备模型中选择焊枪组件Binzel ID 22，拖动到设备区，随后将焊枪拖动到机器人模型上，组成一个机械弧焊臂，在工作站内添加一个IRC5工作控制器，并且进行围栏的搭建，通过建模中的电缆创建焊枪连接线，在建模里将SolidWorks已经建模的工件导入进来，并且进行位置的摆放确定。</p><h3 id="3-3-组件设计"><a href="#3-3-组件设计" class="headerlink" title="3.3 组件设计"></a>3.3 组件设计</h3><p><strong>（1）传输带搭建：</strong><br>首先在建模中创建一个长4000毫米，宽800毫米，高500毫米的长矩形块，将长矩形块进行适当的位置偏移，让其大部分区域处于机械臂的工作空间之内，随后添加在SolidWorks中已经完成建模的焊件。创建传送带，选择刚刚建立的长矩形为传送带本体，将焊件添加进传送带的传送对象之中，随后调整焊件在传送带上的位置，让其刚好位于传送带起始端的位置，随后确定传送带的工作空间，传送距离。工作空间要保证位于机械臂的工作范围之内，传送距离应该小于长矩形的长减去焊件的长度，这样才能保证焊件到达传送带长矩形的末尾的时候会消失，而不会溢出传送带。<br><strong>（2）焊头灯光Smart组件设计：</strong><br>打开RobotStudio的高级显示，其中有创建点光源的选项，选择点光源后在左侧的视图中选择新建的点光源，调节到焊枪的头部位置，随后右击选择安装即可让光源沿着焊枪的头部运动，随后添加一个光源控制的Smart组件，将其控制的光源选择为刚刚创建的点光源，随后在Smart组件中的设计面板中新建一个输入数字变量为kk，这个输入变量指的是控制焊枪火光开关的数字信号，将其连接到光源控制的Smart组件的Enable上，即可实现控制。</p><p><img src="/2021/01/19/RobotStudio1/3.2.jpg" alt="图3.2 添加光源后效果"></p><h3 id="3-4-仿真设计"><a href="#3-4-仿真设计" class="headerlink" title="3.4 仿真设计"></a>3.4 仿真设计</h3><p>将焊件通过控制传送带设置进入工作区，随后切换到传送带的坐标系进行轨迹的规划，按照如图3.3的方式规划两条包含直线运动与圆弧运动的轨迹线。</p><p><img src="/2021/01/19/RobotStudio1/3.3.jpg" alt="图3.3 设计的仿真仿真弧焊运动轨迹"></p><p>随后让机械臂重回机械原点，将坐标系变为机械臂的世界坐标系，然后建立一个坐标原点的示教目标点，将示教器原点拖进路径中建立路径，并进行RAPID的同步，同步完成后可在RAPID代码中加入灯光管理Smart组件的SetDO代码控制灯光，在工作站逻辑内将RAPID代码的信号传输到Smart组件的控制中，随后重启控制器即可进行仿真，相关机器人源代码可参照附录1。</p><h3 id="3-5-结论"><a href="#3-5-结论" class="headerlink" title="3.5 结论"></a>3.5 结论</h3><p>在机器人重复工作时，当传送带将物体送入工作区域时，机械臂将自动进行跟踪并且自动弧焊，完成后则回到机械原点，等待下一个焊件的进入，如此重复运行。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]    Connolly C. Technology and applications of ABB RobotStudio[J]. Industrial Robot: An International Journal, 2009.&lt;/br&gt;<br>[2]    Shimogama S. Apparatus and method for controlling an arc welding robot: U.S. Patent 6,107,601[P]. 2000-8-22.&lt;/br&gt;<br>[3]    王克鸿, 刘永, 徐越兰等. 弧焊机器人离线编程系统[J]. 焊接学报, 2001, 22(4): 84-86.&lt;/br&gt;<br>[4]    ABB Industrial. Introduction of IRB 1660ID[DB/OL]. (DA), 2019-09-16.<br><a href="https://new.abb.com/products/robotics/industrial-robots/irb-1660id">DA: https://new.abb.com/products/robotics/industrial-robots/irb-1660id</a><br>[5]    Craig J J. Introduction to robotics: mechanics and control, 3/E[M]. Pearson Education India, 2009.&lt;/br&gt;<br>[6]    张文增, 陈强, 孙振国, 等. 弧焊机器人工件坐标系快速标定方法[J]. 焊接学报, 2005, 26(7): 1-4.&lt;/br&gt;<br>[7]    朱大奇, 颜明重. 移动机器人路径规划技术综述[J]. 控制与决策, 2010 (7): 961-967.&lt;/br&gt;<br>[8]    王伟, 谢明红, 周国义. 6-DOF 工业机器人逆解优化及其工作空间的研究[J]. 机械与电子, 2011 (1): 57-60. &lt;/br&gt;</p><h4 id="附录1：程序代码"><a href="#附录1：程序代码" class="headerlink" title="附录1：程序代码"></a>附录1：程序代码</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">MODULE Module1</span><br><span class="line">CONST robtarget Target_310:=[[601.992337021,17.494365275,999.738524269],[0.23021145,0.668582596,0.668582596,-0.23021145],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_10:=[[72.426406871,70,350],[0,0.707106781,0.707106781,0],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_20:=[[450,70,350],[0,0.707106781,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_30:=[[450,70,350],[0,0.707106781,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_40:=[[471.213203436,78.786796565,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_50:=[[480,100,350],[0,0.707106781,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_60:=[[480,100,350],[0,0.707106781,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_70:=[[480,477.573593129,350],[0,0.707106781,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_80:=[[480,477.573593129,350],[0,0.707106781,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_90:=[[473.826834324,486.812388454,350],[0,0.659345815,0.751839808,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_100:=[[462.928932188,484.644660941,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_110:=[[462.928932188,484.644660941,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_120:=[[65.355339059,87.071067812,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_130:=[[65.355339059,87.071067812,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_140:=[[63.187611546,76.173165677,350],[0,0.751839807,0.659345815,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_150:=[[72.426406871,70,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_160:=[[20,122.426406871,350],[0,0.707106782,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_170:=[[26.173165676,113.187611546,350],[0,0.831469612,0.555570233,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_180:=[[37.071067812,115.35533906,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_190:=[[37.071067812,115.35533906,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_200:=[[434.644660941,512.928932188,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_210:=[[437.573593129,520,350],[0,0.707106782,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_220:=[[434.644660941,527.071067812,350],[0,0.707106782,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_230:=[[427.573593129,530,350],[0,0.707106781,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_240:=[[427.573593129,530,350],[0,0.707106781,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_250:=[[50,530,350],[0,0.707106781,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_260:=[[50,530,350],[0,0.707106781,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_270:=[[28.786796565,521.213203436,350],[0,0.70710678,0.707106782,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_280:=[[20,500,350],[0,0.707106782,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_290:=[[20,500,350],[0,0.707106782,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">CONST robtarget Target_300:=[[20,122.426406871,350],[0,0.707106782,0.707106781,0],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,0]];</span><br><span class="line">    !***********************************************************</span><br><span class="line">    !</span><br><span class="line">    ! Module:  Module1</span><br><span class="line">    !</span><br><span class="line">    ! Description:</span><br><span class="line">    !   &lt;Insert description here&gt;</span><br><span class="line">    !</span><br><span class="line">    ! Author: ROBOTSTUDIO</span><br><span class="line">    !</span><br><span class="line">    ! Version: 1.0</span><br><span class="line">    !</span><br><span class="line">    !***********************************************************</span><br><span class="line">    </span><br><span class="line">    !***********************************************************</span><br><span class="line">    !</span><br><span class="line">    ! Procedure main</span><br><span class="line">    !</span><br><span class="line">    !   This is the entry point of your program</span><br><span class="line">    !</span><br><span class="line">    !***********************************************************</span><br><span class="line">    PROC main()</span><br><span class="line">ActUnit CNV1;</span><br><span class="line">WHILE 2&gt;1 DO</span><br><span class="line">         WaitWObj wobj_cnv1;</span><br><span class="line">         Path_10;</span><br><span class="line">         DropWObj wobj_cnv1;</span><br><span class="line">        ENDWHILE</span><br><span class="line">    ENDPROC</span><br><span class="line">PROC Path_10()</span><br><span class="line">    MoveL Target_310,v1000,fine,tWeldGun\WObj:=wobj0;</span><br><span class="line">    MoveL Target_10,v1000,fine,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">        SetDO awo0,1;</span><br><span class="line">    MoveL Target_20,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveC Target_40,Target_50,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveL Target_70,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveC Target_90,Target_100,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveL Target_120,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveC Target_140,Target_150,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveL Target_160,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    SetDO awo0,0;</span><br><span class="line">    MoveC Target_170,Target_180,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    SetDO awo0,1;</span><br><span class="line">    MoveL Target_200,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveC Target_220,Target_230,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveL Target_250,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveC Target_270,Target_280,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">    MoveL Target_300,v150,z0,tWeldGun\WObj:=wobj_cnv1;</span><br><span class="line">        SetDO awo0,0;</span><br><span class="line">        MoveL Target_300,v150,z0,Tooldata_1\WObj:=wobj_cnv1;</span><br><span class="line">        MoveL Target_310,v1000,fine,tWeldGun\WObj:=wobj0;</span><br><span class="line">ENDPROC</span><br><span class="line">ENDMODULE</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="附录2：ABB-IRB-1660ID工作空间"><a href="#附录2：ABB-IRB-1660ID工作空间" class="headerlink" title="附录2：ABB_IRB_1660ID工作空间"></a>附录2：ABB_IRB_1660ID工作空间</h4><hr><p><img src="/2021/01/19/RobotStudio1/f2.jpg" alt><br><img src="/2021/01/19/RobotStudio1/f21.jpg" alt></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
          <category> Robot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学校项目 </tag>
            
            <tag> RobotStudio </tag>
            
            <tag> SolidWorks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习手记】堆栈电路的EDA设计</title>
      <link href="/2020/07/27/edadesign/"/>
      <url>/2020/07/27/edadesign/</url>
      
        <content type="html"><![CDATA[<h2 id="1-设计要求"><a href="#1-设计要求" class="headerlink" title="1. 设计要求"></a>1. 设计要求</h2><p>设计5字节的堆栈电路并进行仿真，电路使用8位并行接口，端口包括8位数据端口D、读写信号RD与WR、片选端口CS。当CS、WR产生下降沿时，电路通过8位并行接口将数据写入堆栈；当CS、RD产生下降沿时，电路通过8位并行接口按照“先入后出”的顺序，将堆栈数据依次送至数据总线D。</p><h2 id="2-功能与电路逻辑分析"><a href="#2-功能与电路逻辑分析" class="headerlink" title="2. 功能与电路逻辑分析"></a>2. 功能与电路逻辑分析</h2><h3 id="2-1-功能分析"><a href="#2-1-功能分析" class="headerlink" title="2.1 功能分析"></a>2.1 功能分析</h3><p>堆栈是计算机系统中应用非常广泛的一种储存电路，它遵循先入后出的储存原则，常用于计算机控制过程中的一些重要的运行参数与数据的存储恢复。基本堆栈存储区STACK、堆栈指针SP，如图2.1所示。</p><p><img src="/2020/07/27/edadesign/2.1.jpg" alt="图2.1 堆栈电路简化模型图"></p><p>当存入数据时，堆栈电路获取堆栈指针SP，计算对应的存储地址。然后将指定数据传送至相应的存储单元，则堆栈指针加1运算，即称之为“压栈”或“入栈”；读数据操作时，堆栈电路首先获取堆栈指针SP，堆栈指针则进行减1运算，随后计算地址信息，将对应存储单元的数据传送至数据总线，完成栈内数据的“出栈”操作。&lt;/br&gt;在堆栈初始化状态时，堆栈指针SP指向图中的栈底。随堆栈操作的进行，根据栈操作的指令，堆栈指针依次加1（上移）或减1（下移），直至到达栈底或栈顶。</p><h3 id="2-2-实现原理"><a href="#2-2-实现原理" class="headerlink" title="2.2 实现原理"></a>2.2 实现原理</h3><p>堆栈电路设计通过写进程WrProc（压栈）、读进程RdProc（出栈）、指针控制进程PntCon与堆栈储存区DSeg共同实现。为便于电路描述，堆栈设计中特别设置堆栈的读指针pRd与写指针pWr，其中的写指针pWr与堆栈SP取值相同，读指针pRd的取值为pWr减1，与堆栈定义及操作完全一致。&lt;/br&gt;<br>写进程WrProc实现数据的压栈操作，进程响应器件并行接口的写操作，将写入的数据送入堆栈DSeg，完成压栈。同时，WrProc结合电路的读写状况调整写指针pWr；读进程RdProc实现数据的出栈操作，进程响应器件并行接口的读操作，将堆栈内数据送至器件的数据端口D，完成出栈；进程PntCon专门用于读指针的动态调整，进程根据器件读写状况计算堆栈的读指针。</p><h2 id="3-VHDL电路描述"><a href="#3-VHDL电路描述" class="headerlink" title="3. VHDL电路描述"></a>3. VHDL电路描述</h2><p>根据以上电路原理，设计如下VHDL电路描述，其中分为实体<code>dataStack</code>，依附于实体的结构体<code>StackBody</code>，其中包含三个进程分别为入栈进程<code>WrProc</code>，出栈进程<code>RdProc</code>和动态调整进程<code>PntCon</code>；描述语句为IEEE标准，引用IEEE逻辑器件程序库，使用程序包<code>IEEE.STD_LOGIC_1164</code>与<code>IEEE.STD_LOGIC_UNSIGNED</code>，描述代码如下：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LIBRARY</span> IEEE;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_1164.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">USE</span> IEEE.STD_LOGIC_UNSIGNED.<span class="keyword">ALL</span>;</span><br><span class="line"><span class="keyword">ENTITY</span> dataStack <span class="keyword">IS</span></span><br><span class="line">  <span class="keyword">PORT</span>(D:<span class="keyword">INOUT</span> <span class="built_in">STD_LOGIC_VECTOR</span>(<span class="number">7</span> <span class="keyword">DOWNTO</span> <span class="number">0</span>);</span><br><span class="line">       CS,RD,WR:<span class="keyword">IN</span> <span class="built_in">STD_LOGIC</span>;</span><br><span class="line"> Empt,Full:<span class="keyword">OUT</span> <span class="built_in">STD_LOGIC</span>);</span><br><span class="line"><span class="keyword">END</span> dataStack;</span><br><span class="line"><span class="keyword">ARCHITECTURE</span> StackBody <span class="keyword">OF</span> dataStack <span class="keyword">IS</span></span><br><span class="line">  <span class="keyword">TYPE</span> mMem <span class="keyword">IS</span> <span class="keyword">ARRAY</span>(<span class="number">0</span> <span class="keyword">TO</span> <span class="number">7</span>)<span class="keyword">OF</span> <span class="built_in">STD_LOGIC_VECTOR</span>(<span class="number">7</span> <span class="keyword">DOWNTO</span> <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">SIGNAL</span> DSeg:mMem;</span><br><span class="line">  <span class="keyword">SIGNAL</span> EmptF:<span class="built_in">STD_LOGIC</span>:=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  <span class="keyword">SIGNAL</span> FullF:<span class="built_in">STD_LOGIC</span>:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">SIGNAL</span> pWr:<span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">8</span> :=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">SIGNAL</span> pRd:<span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">8</span> :=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  WrProc:<span class="keyword">PROCESS</span>(RD,CS,EmptF,WR,D,pRd)</span><br><span class="line">    <span class="keyword">VARIABLE</span> iWr:<span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">8</span> :=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">VARIABLE</span> iFull:<span class="built_in">STD_LOGIC</span>:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> <span class="keyword">VARIABLE</span> iDeta:<span class="built_in">STD_LOGIC</span>:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> RD=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> CS=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> EmptF=<span class="string">&#x27;0&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">   iDeta:=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">iFull:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> <span class="keyword">ELSIF</span> RISING_EDGE(WR) <span class="keyword">AND</span> CS=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> iFull=<span class="string">&#x27;0&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">   <span class="keyword">IF</span> iDeta=<span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">  iWr:=pRd;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">DSeg(iWr)&lt;=D;</span><br><span class="line"><span class="keyword">IF</span> iWr=<span class="number">7</span> <span class="keyword">THEN</span></span><br><span class="line">  iFull:=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">iWr:=iWr+<span class="number">1</span>;</span><br><span class="line">iDeta:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">     pWr&lt;=iWr;</span><br><span class="line"> FullF&lt;=iFull;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">PROCESS</span> WrProc;</span><br><span class="line">  RdProc:<span class="keyword">PROCESS</span>(CS,RD,EmptF,DSeg,pRd)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">IF</span> RD=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> CS=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> EmptF=<span class="string">&#x27;0&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">   D&lt;=DSeg(pRd);</span><br><span class="line"> <span class="keyword">ELSE</span></span><br><span class="line">D&lt;=<span class="string">&quot;ZZZZZZZZ&quot;</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">PROCESS</span> RdProc;</span><br><span class="line">  PntCon:<span class="keyword">PROCESS</span>(WR,CS,FullF,pWr,RD)</span><br><span class="line">    <span class="keyword">VARIABLE</span> iRd:<span class="built_in">INTEGER</span> <span class="keyword">RANGE</span> <span class="number">0</span> <span class="keyword">TO</span> <span class="number">8</span> :=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">VARIABLE</span> iEmpt:<span class="built_in">STD_LOGIC</span>:=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"> <span class="keyword">VARIABLE</span> iDeta:<span class="built_in">STD_LOGIC</span>:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> WR=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> CS=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> FullF=<span class="string">&#x27;0&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">   iDeta:=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">iEmpt:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> <span class="keyword">ELSIF</span> FALLING_EDGE(RD) <span class="keyword">AND</span> CS=<span class="string">&#x27;0&#x27;</span> <span class="keyword">AND</span> iEmpt=<span class="string">&#x27;0&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">   <span class="keyword">IF</span> iDeta=<span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">  iRd:=pWr-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">ELSIF</span> iRd&gt;<span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">  iRd:=iRd-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">  iEmpt:=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">iDeta:=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"> pRd&lt;=iRd;</span><br><span class="line"> EmptF&lt;=iEmpt;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">PROCESS</span> PntCon;</span><br><span class="line">  Empt&lt;=EmptF;</span><br><span class="line">  Full&lt;=FullF;</span><br><span class="line"><span class="keyword">END</span> StackBody; </span><br></pre></td></tr></table></figure><p>堆栈电路<code>dataStack</code>在正常工作时，数据的出入栈动作均会影响读写指针pRd与pWr；写进程<code>WrProc</code>响应信号WR的上升沿，CS为低电平有效且堆栈<code>dataStack</code>不为满状态，若上次操作为出栈<strong>（iDeta =‘1’）</strong>，<code>WrProc</code>获取读指针pRd，根据pRd计算当前写指针pWr。当上次操作为入栈<strong>（iDeta=‘0’）</strong>时，如果pWr到达栈顶，将堆栈满标志<code>iFull</code>置位，调整写指针pWr。然后写进程<code>WrProc</code>获取数据总线D，送入堆栈存储区<code>DSeg</code>中由pWr指定的存储单元<code>DSeg(pWr)</code>，同时清除标志<code>iDeta</code>。&lt;/br&gt;由于写指针pWr的计算与上次栈操作类型有关，进程<code>WrProc</code>监测读信号RD，若RD发生变化、CS有效且堆栈不为空（EmptF为“0”），进程<code>WrProc</code>将<code>iDeta</code>置位，供<code>WrProc</code>执行入栈操作时计算pWr使用。&lt;/br&gt;进程<code>PntCon</code>计算堆栈电路的读指针pRd，进程响应读信号的下降沿，若CS有效且堆栈不为空（EmptF为“0”），则计算堆栈读指针pRd，执行出栈操作。进程<code>RdProc</code>响应读信号RD，在CS有效且堆栈不为空时，将读指针pRd对应的堆栈存储单元<code>DSeg(pRd)</code>送上数据总线D。</p><h2 id="4-电路的实现"><a href="#4-电路的实现" class="headerlink" title="4. 电路的实现"></a>4. 电路的实现</h2><p>使用<strong>QuartusⅡ 13.0</strong>版本进行电路搭建以及仿真。首先进行新建项目，将VHDL描述程序加入设计项目并作为顶层实体，实现预定的堆栈功能电路。顶层实体以及项目名称需要保持一致，均命名为<code>dataStack</code>。同时实体的VHDL描述程序文件名称需要与顶层实体名称一一对应，命名为<code>dataStack</code>。本次电路载体选择<strong>Cyclone Ⅲ</strong>系列的<strong>EP3C40Q240C8N</strong>来实现预定电路，进行编译之后如图4.1所示。</p><p><img src="/2020/07/27/edadesign/4.1.png" alt="图4.1 Quartus Ⅱ编译状态图"></p><p>其中根据编译总结报告可知（图4.2），采用<strong>EP3C40Q240C8N</strong>器件实现目标堆栈电路dataStack需要占用<strong>宏单元（Total logic elements）</strong>101个，所占用总数小于器件所提供宏单元的1%；实现目标逻辑占用器件端口（Pins）13个，占器件所提供的I/O端口总数的10%。器件<strong>EP3C40Q240C8N</strong>采用129脚的TQFP封装，速度等级为<strong>Level-9</strong>，封装形式及器件大小，速度等级对于实现堆栈电路来说大材小用，但是应学校器材限制，使用<strong>EP3C40Q240C8N</strong>器件来实现dataStack电路十分合理。</p><p><img src="/2020/07/27/edadesign/4.2.png" alt="图4.2 编译总结报告图"></p><p>因此最终指定器件为<strong>EP3C40Q240C8N</strong>，考虑到后续制板、布局、布线的合理性以及调试的方便性，堆栈电路dataStack的引脚分配与器件指定情况如图4.3所示。图中带阴影引脚为已分配信号的引脚，从引脚18到引脚142,按照逆时针顺序，端口上分配的信号依次为：片选信号CS、双向数据总线的数据端口D、堆栈电路dataStack空标志Empt、堆栈电路dataStack满标志Full、计算机并行接口的读信号RD、计算机并行接口的写信号WR。</p><p><img src="/2020/07/27/edadesign/4.3.png" alt="图4.3 引脚分配与器件指定情况"></p><p>表4.4给出了堆栈电路dataStack实现器件EP3C40Q240C8N引脚与I/O信号的详细对应关系。</p><hr><center>表4.4 堆栈电路dataStack的引脚信号详细分配状况</center><div class="table-container"><table><thead><tr><th>To</th><th>Direction</th><th>Location</th><th style="text-align:center">I/O Bank</th><th>VREF Group</th><th>Fitter Location</th></tr></thead><tbody><tr><td>CS</td><td>Input</td><td>PIN_18</td><td style="text-align:center">1</td><td>B1_N2</td><td>PIN_18</td></tr><tr><td>D(7)</td><td>Bidir</td><td>PIN_21</td><td style="text-align:center">1</td><td>B1_N3</td><td>PIN_21</td></tr><tr><td>D(6)</td><td>Bidir</td><td>PIN_38</td><td style="text-align:center">2</td><td>B2_N0</td><td>PIN_38</td></tr><tr><td>D(5)</td><td>Bidir</td><td>PIN_80</td><td style="text-align:center">3</td><td>B3_N1</td><td>PIN_80</td></tr><tr><td>D(4)</td><td>Bidir</td><td>PIN_78</td><td style="text-align:center">3</td><td>B3_N1</td><td>PIN_78</td></tr><tr><td>D(3)</td><td>Bidir</td><td>PIN_76</td><td style="text-align:center">3</td><td>B3_N1</td><td>PIN_76</td></tr><tr><td>D(2)</td><td>Bidir</td><td>PIN_73</td><td style="text-align:center">3</td><td>B3_N2</td><td>PIN_73</td></tr><tr><td>D(1)</td><td>Bidir</td><td>PIN_70</td><td style="text-align:center">3</td><td>B3_N2</td><td>PIN_70</td></tr><tr><td>D(0)</td><td>Bidir</td><td>PIN_69</td><td style="text-align:center">3</td><td>B3_N2</td><td>PIN_69</td></tr><tr><td>Empt</td><td>Output</td><td>PIN_139</td><td style="text-align:center">5</td><td>B3_N2</td><td>PIN_139</td></tr><tr><td>Full</td><td>Output</td><td>PIN_142</td><td style="text-align:center">5</td><td>B5_N1</td><td>PIN_142</td></tr><tr><td>RD</td><td>Input</td><td>PIN_37</td><td style="text-align:center">2</td><td>B2_N0</td><td>PIN_37</td></tr><tr><td>WR</td><td>Input</td><td>PIN_39</td><td style="text-align:center">2</td><td>B2_N0</td><td>PIN_39</td></tr></tbody></table></div><hr><h2 id="5-电路分析与仿真测试"><a href="#5-电路分析与仿真测试" class="headerlink" title="5. 电路分析与仿真测试"></a>5. 电路分析与仿真测试</h2><p>在<strong>QuartusⅡ</strong>中新建一个名为dataStack的vwf逻辑功能仿真波形文件，将图中的仿真栅格（Grid Size）大小设置为20ns，仿真总时长（Set End Time）设置为3us。导入信号并设置波形输入信号（如图5.1）。</p><p><img src="/2020/07/27/edadesign/5.1.png" alt="图5.1"></p><p>其中信号\PntCon:iRd为堆栈电路dataStack的读指针，与其相对应，信号\WrProc:iWr为堆栈电路dataStack的写指针；信号D为计算机并行接口8位双向数据端口的设定值，信号DATA为堆栈电路dataStack工作时8位双向数据端口D的信号变化情况。&lt;/br&gt;在上述仿真激励中的时间段30-450ns内，并行接口写信号WR连续产生下降沿，向堆栈电路dataStack持续写入10个数据。此时，堆栈电路dataStack的工作时序仿真如图5.2所示。</p><p><img src="/2020/07/27/edadesign/5.2.png" alt="图5.2"></p><p>从时刻30ns开始并行接口向堆栈电路dataStack持续送入数据01-10，写指针iWr依次增加，当写至数据8时，满标志Full变为高电平，堆栈满。在时间段520-580ns内，RD连续发出读脉冲，DATA送出最后的压栈数据8、7。在时间段660-720ns内，将数据10、11压栈，Full重新变为高电平。图5.3所示为dataStack持续出栈情况。</p><p><img src="/2020/07/27/edadesign/5.3.png" alt="图5.3"></p><p>从840ns时刻开始，RD连续发出读脉冲，数据总线DATA端连续送出数据12、11、6、5、4、3、2、1，与前文的压栈数据顺序一一对应。在840ns时刻，RD变为低电平，堆栈dataStack开始送出数据，满标志Full迅速变为低电平；送出8个数据后，空标志Empt置位，堆栈清空。&lt;/br&gt;当堆栈满后，数据随机出栈时的堆栈电路工作时序仿真结果如图5.4所示。</p><p><img src="/2020/07/27/edadesign/5.4.png" alt="图5.4"></p><p>从时刻1.30us开始，CS有效，WR连续发出写脉冲，DATA端数据13-20依次被压入堆栈dataStack。压栈开始，空标志Empt迅速变为低电平。当8当个数据完成压栈后，堆栈满标志Full置位。在时刻1.76us处，RD连续发出4个随机的读信号，栈顶的4个数据20、19、18、17被送上dataStack电路的数据总线DATA，此时，堆栈内顺序保留数据16、15、14、13。</p><p><img src="/2020/07/27/edadesign/5.5.png" alt="图5.5"></p><p>图5.5所示为随机压栈至满栈后，持续出栈时电路的工作时序仿真结果。从时刻1.32us开始，端口WR上连续出现写脉冲，数据23-26被压入堆栈，堆栈满标志Full被置为高电平，堆栈dataStack进入满状态。从时刻2.30us开始，端口RD持续发出读脉冲，堆栈内的数据被依次送至DATA端口，数据序列为26、25、24、23、16、15、14与13，数据顺序符合压栈顺序。&lt;/br&gt;以上，结合电路的预定功能，通过4种状况对堆栈电路dataStack进行了初步的测试以及逻辑仿真校验，电路动作与原定功能和工作时序一致。堆栈电路dataStack的其他工作时序分析与以上分析基本类似，电路达到设计要求。</p><h2 id="6-设计总结"><a href="#6-设计总结" class="headerlink" title="6. 设计总结"></a>6. 设计总结</h2><p>电子设计自动化（EDA）是二十一世纪最重要的应用科学之一，在计算机、数控机床、机器人、互联网、数字媒体、人工智能等方面举足轻重。</p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
          <category> 硬件设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EDA设计 </tag>
            
            <tag> FPGA </tag>
            
            <tag> Quartus </tag>
            
            <tag> 堆栈电路 </tag>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习手记】单闭环直流调速控制系统及Matlab仿真</title>
      <link href="/2020/07/11/motor-singleLoop/"/>
      <url>/2020/07/11/motor-singleLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="1-已知电机基本参数"><a href="#1-已知电机基本参数" class="headerlink" title="1. 已知电机基本参数"></a>1. 已知电机基本参数</h2><p>我们需要以下数据：<br>其中电机额定电压<script type="math/tex">{U_N} = 12v</script>，额定电流<script type="math/tex">{I_N} = 0.613A</script>，电机电阻<script type="math/tex">R = 6.96\Omega</script>，电机电感<script type="math/tex">L = 0.445mH</script>，<br>额定转速<script type="math/tex">{n_N} = 6000rpm</script>，电机模型转动惯量（本人学号尾数为9通过要求计算得到）<script type="math/tex">J = 7.961 \times {10^{ - 4}}g{m^2}</script>；PWM放大器时间常数<script type="math/tex">{T_s} = 1 \times {10^{ - 4}}s</script>，PWM放大倍数<script type="math/tex">{K_s} = 5</script>，并已知速度反馈系数<script type="math/tex">\alpha  = 0.003rpm/v</script>。</p><h2 id="2-电机模型计算"><a href="#2-电机模型计算" class="headerlink" title="2. 电机模型计算"></a>2. 电机模型计算</h2><p> 知道有关直流电机参数后可以进行电机的建模，首先可以将直流电机简化为图2.1的电路模型：</p><p> <img src="/2020/07/11/motor-singleLoop/2.1.jpg" alt="图2.1 直流电机简化电路模型"></p><p>由简化的电路模型可以得出以下表达式，基尔霍夫定律，直流电机电路模型：</p>$${u_{a0}} = R{i_a} + L\frac{{d{i_a}}}{{dt}} + {E_a}$$<p>额定励磁下的感应电动势：<br>$${E_a} = {C_e}n$$<br>根据牛顿动力学定律，忽略空载转矩：<br>$${T_{em}} = {T_L} + \frac{{G{D^2}}}{{375}}\frac{{dn}}{{dt}}$$<br>额定励磁下的电磁转矩：</p>$${T_{em}} = {C_T}{i_a}$$<p>额定励磁下的转矩电流比：<br>$${C_T} = \frac{{30}}{\pi }{C_e}$$<br>其中，<script type="math/tex">{T_L}</script>为电机的负载转矩，即外界施加的负载，单位为牛米（<script type="math/tex">N \cdot m</script>）；   为电力拖动系统运动部分折算到电动机轴上的飞轮力矩，其中可以与电机模型转动惯量<script type="math/tex">J</script>等价，单位为牛米方（<script type="math/tex">N \cdot {m^2}</script>）；<script type="math/tex">{C_T}</script>为转矩电流比，单位为<script type="math/tex">N \cdot m/A</script>； <script type="math/tex">{C_e}</script>为电动势常数，单位为<script type="math/tex">V \cdot \min /r</script>。<br>在额定条件下，只考虑电阻影响，可以求出<script type="math/tex">{C_e}</script>的大小：<br>$${C_e} = \frac{{{U_N} - R{I_N}}}{{{n_N}}} = 1.3 \times {10^{ - 3}}V \cdot \min /r$$<br>在进行永磁式直流电机建模时需要计算并求取其传递函数，因此分别进行时间常数的定义。定义电枢回路电磁时间常数为<script type="math/tex">{T_a}</script>，定义电力拖动系统的机电时间常数为<script type="math/tex">{T_m}</script>并列出以下方程：<br>$${T_a} = \frac{L}{R}$$</p>$${T_m} = \frac{{G{D^2}R}}{{375{C_e}{C_T}}}$$<p>输入转矩<script type="math/tex">{T_L}</script>与负载电流之间的关系可以表示为：<br>$${i_{aL}} = \frac{{{T_L}}}{{{C_T}}}$$<br>将 <script type="math/tex">{T_a}</script>、<script type="math/tex">{T_m}</script>、<script type="math/tex">{i_{aL}}</script>方程带入电机的模型方程可以得出以下微分方程,电压电流间传递函数：<br>$$\frac{{{I_a}(s)}}{{{U_{a0}}(s) - {E_a}(s)}} = \frac{{1/R}}{{{T_a}s + 1}}$$<br>电流与电动势间传递函数：<br>$$\frac{{{E_a}(s)}}{{{I_a}(s) - {I_{aL}}(s)}} = \frac{R}{{{T_m}s}}$$<br>负载转矩与负载电流间传递函数：<br>$$\frac{{{T_L}(s)}}{{{I_{aL}}(s)}} = \frac{1}{{{C_T}}}$$<br>通过传递函数的整理可得直流电机的动态结构图如图2.2所示：</p><p><img src="/2020/07/11/motor-singleLoop/2.2.jpg" alt="图2.2 永磁直流电机动态结构图"></p><p>经过整理可得传递函数为(理想空载条件下.)：<br>$$\frac{{{U_{a0}}(s)}}{{n(s)}} = \frac{{1/{C_e}}}{{{T_m}{T_a}{s^2} + {T_m}s + 1}} = \frac{{775.8433}}{{0.0595{s^2} + 0.9314s + 1}}$$</p><h2 id="3-仿真系统的传递函数"><a href="#3-仿真系统的传递函数" class="headerlink" title="3. 仿真系统的传递函数"></a>3. 仿真系统的传递函数</h2><p>单闭环永磁直流电机控制系统主要包括三个子系统，分别为永磁式直流电机、PWM脉宽调节器和PID控制器。以下为PWM脉宽调节器与PID控制器的传递函数构建，电机已经在电机建模计算中进行详细的传递函数搭建，因此不再赘述。</p><p><strong>（1）PWM脉宽调节器的模型搭建：</strong> </p><p>PWM脉宽调节器主要由脉宽调制器、驱动电路、变换器构成。当输入的控制电压<script type="math/tex">{U_c}</script>改变时，变换器的输出电压需要下一周期才能发生改变，因此可以将三者进行简化计算，共同看成一个滞后环节。因此PWM脉宽调节器的传递函数可以简化为：</p>$$\frac{{{U_{a0}}(s)}}{{{U_{ct}}(s)}} = {K_s}{e^{ - {T_s}s}}$$<p>因为此传递函数中包含指数<script type="math/tex">e</script>，所以系统为非最小相位系统，进行分析以及计算都非常麻烦，需要进行近似计算。先用泰勒级数将<script type="math/tex">{e^{ - {T_s}s}}</script>进行展开：</p>$$\frac{{{U_{a0}}(s)}}{{{U_{ct}}(s)}} = \frac{{{K_s}}}{{1 + {T_s}s + \frac{1}{{2!}}T_s^2{s^2} + \frac{1}{{3!}}T_s^3{s^3} +  \cdots }}$$<p>考虑到<script type="math/tex">{T_s}</script>非常小，忽略其高次项，则PWM脉宽调节装置的传递函数可近似成一阶惯性环节，其传递函数为：</p>$$\frac{{{U_{a0}}(s)}}{{{U_{ct}}(s)}} \approx \frac{{{K_s}}}{{{T_s}s + 1}}$$<p>根据传递函数，只要<script type="math/tex">{T_s}s \ll 1</script>传递函数就成立；依照自控原理的相关知识，将<script type="math/tex">s</script>转换为<script type="math/tex">jω</script>，便得到相应的幅相频率特性，经过化简，得到的传递函数成立条件为：</p>$$\frac{1}{{2!}}T_s^2{\omega ^2} \ll 1$$<p>推广到工程上，只要满足远小于0.1就可以认为上式成立，所以得到系统的传递函数为：</p>$$\frac{{{U_{a0}}(s)}}{{{U_{ct}}(s)}} = \frac{{{K_s}}}{{{T_s}s + 1}},\frac{1}{{2!}}T_s^2{\omega ^2} \ll 0.1$$<p><strong>（2） PID控制器的模型搭建：</strong> </p><p>PID控制器是按偏差的比例（Proportion）、积分（Integration）、微分（Differentiation）进行控制的调节器简称，它主要针对控制对象来进行参数调节。在本次报告中主要进行PI控制器与PID控制器的讨论。</p><p><strong>PI控制器：</strong>比例积分控制器通过比例环节与积分环节进行调节，P作用的输出与偏差成比例，称为比例控制作用；I作用的输出与偏差的积分成比例，称为积分控制作用。</p><p>其输出与偏差的关系为：</p>$$u(t) = {K_p}[e(t) + \frac{1}{{{T_I}}}\int {e(t)dt]}$$<p>设：<script type="math/tex">{K_i} = \frac{K_p}{T_I}</script></p><p>因此PI控制器所对应的开环传递函数为：</p>$$\frac{{{U_{ct}}(s)}}{{\Delta {U_n}(s)}} = {K_p} + {K_i}\frac{1}{s}$$<p>其中<script type="math/tex">{K_p}</script>为比例放大系数，<script type="math/tex">{T_I}</script>为积分时间常数。</p><p><strong>PID控制器：</strong>比例积分微分控制器在PI控制器的基础上增加了微分环节，在PI作用的基础上增加D作用的输出与偏差的微分成比例，称为微分控制作用。其输出与偏差关系为：</p>$$u(t) = {K_p}e(t) + {K_i}\int_0^1 {e(t)dt}  + {K_d}\frac{{de(t)}}{{dt}}$$$${K_d} = {T_D}{K_p}$$<p>对u(t)求拉普拉斯变换并且整理可得PID控制器的开环传递函数为：</p>$$\frac{{{U_{ct}}(s)}}{{\Delta {U_n}(s)}} = \frac{{{K_p}(s + {K_d}{s^2} + {K_i})}}{{s{{(s + 1)}^2}}}$$<p>式中的<script type="math/tex">T_D</script>为微分时间常数。</p><p>因为采用两种不同的控制器，因此单闭环直流电机控制系统的模型也不相同，于是分别求两个不同控制器系统的传递函数与动态结构图。本单闭环系统主要以检测电机的转速并且将电机的转速转换为相应的电压<script type="math/tex">\Delta {U_n}(s)</script>并与输入的电压进行比较。</p><p>以PI控制器的单闭环直流电机控制系统传递函数模型如图3.1所示，已知各个环节的传递函数可以求出传递函数。</p><p><img src="/2020/07/11/motor-singleLoop/3.1.jpg" alt="图3.1 单闭环直流调速系统动态图（PI）"></p><p>以PI控制器的单闭环直流调速系统传递函数推导可先求出整个系统的开环传递函数，用<script type="math/tex">{G_{pi}}(s)</script>表示，则开环传递函数如下（理想空载条件下）：</p>$${G_{pi}}(s) = \frac{{{K_p}{K_s}s + {K_i}{K_s}}}{{{C_e}{T_a}{T_m}{T_s}{s^4} + ({C_e}{T_a}{T_m} + {C_e}{T_m}{T_s}){s^3} + ({C_e}{T_m} + {C_e}{T_s}){s^2} + {C_e}s}}$$<p>则闭环传递函数<script type="math/tex">{\Phi _{pi}}(s)</script>为：</p>$${\Phi _{pi}}(s) = \frac{{{G_{pi}}}}{{1 + {G_{pi}}\alpha }} = \frac{{{K_p}{K_s}s + {K_i}{K_s}}}{{{C_e}{T_a}{T_m}{T_s}{s^4} + {C_e}{T_m}({T_a} + {T_s}){s^3} + {C_e}({T_m} + {T_s}){s^2} + ({C_e} + \alpha {K_p}{K_s})s + \alpha {K_i}{K_s}}}$$<p>设<script type="math/tex">K_p</script>、<script type="math/tex">K_i</script>都为1，并且代入已知参数可以得到系统的闭环传递函数为：</p>$${\Phi _{pi}}(s) = \frac{{5s + 5}}{{7.6754 \times {{10}^{ - 9}}{s^4} + 7.6874 \times {{10}^{ - 5}}{s^3} + 0.0012{s^2} + 0.0163s + 0.015}}$$<p>以PID控制器的单闭环直流电机控制系统传递函数模型如图3.2所示，已知各个环节的传递函数可以求出传递函数。</p><p><img src="/2020/07/11/motor-singleLoop/3.2.jpg" alt="图3.2 单闭环直流调速系统动态图（PID）"></p><p>以PID控制器的单闭环直流调速系统传递函数推导可先求出整个系统的开环传递函数，用<script type="math/tex">{G_{pid}}(s)</script>表示，则开环传递函数如下（理想空载条件下）：</p>$${G_{pid}}(s) = \frac{{{K_p}{K_s}({K_d}{s^2} + s + {K_i})}}{{{C_e}s({T_s}s + 1){{(s + 1)}^2}({T_a}{T_m}s + {T_m}s + 1)}}$$<p>将开环传递函数<script type="math/tex">{G_{pid}}(s)</script>进行闭环运算可以得到闭环传递函数为：</p>$${\Phi _{pid}}(s) = \frac{{{K_p}{K_s}({K_d}{s^2} + s + {K_i})}}{{\alpha {K_p}{K_s}({K_d}{s^2} + s + {K_i}) + {C_e}s({T_s}s + 1){{(s + 1)}^2}({T_a}{T_m}{s^2} + {T_m}s + 1)}}$$<p>设<script type="math/tex">K_p</script>、<script type="math/tex">K_i</script>和<script type="math/tex">K_d</script>都为1，并且代入已知参数可以得到系统的闭环传递函数为：</p>$${\Phi _{pid}}(s) = \frac{{5{s^2} + 5s + 5}}{{7.6754 \times {{10}^{ - 9}}{s^6} + 7.6889 \times {{10}^{ - 5}}{s^5} + 1.4 \times {{10}^{ - 3}}{s^4} + 3.8 \times {{10}^{ - 3}}{s^3} + 0.0188{s^2} + 0.0163s + 0.015}}$$<h2 id="4、-仿真结果"><a href="#4、-仿真结果" class="headerlink" title="4、 仿真结果"></a>4、 仿真结果</h2><p><strong>（1） 基于PI控制器的单闭环直流电机控制系统仿真：</strong></p><p>首先创建m脚本文件并输入电机参数、PWM调节器参数和相关的反馈系数，完成后运行脚本，等待右侧工作区出现相关的参数。打开Simulink后新建一个永磁直流电机模型，模型如图4.1所示。</p><p><img src="/2020/07/11/motor-singleLoop/4.1.png" alt="图4.1 永磁直流电机仿真模型"></p><p>随后搭建外部的控制模型，外部模型如图4.2所示。</p><p><img src="/2020/07/11/motor-singleLoop/4.2.png" alt="图4.2 单闭环直流电机控制仿真模型"></p><p>输入电压使用单位阶跃响应信号，设置开始时间为0.1s，阶跃电压值为12V；设置负载转矩为单位阶跃响应为0，模拟理想空载下的模型；设置PID控制器的P和I分别为1；考虑到调节器的时间较快，因此设置仿真持续时间为2s；最终得到仿真的转速与电枢电流图如图4.3 4.4所示。</p><p><img src="/2020/07/11/motor-singleLoop/4.3.svg" alt="图4.3 仿真转速图（PI）"></p><p><img src="/2020/07/11/motor-singleLoop/4.4.svg" alt="图4.4 仿真电流图（PI）"></p><p>对应的根轨迹图与伯德图如图4.5 4.6所示。</p><p><img src="/2020/07/11/motor-singleLoop/4.5.svg" alt="图4.5 PI系统的根轨迹图"></p><p><img src="/2020/07/11/motor-singleLoop/4.6.svg" alt="图4.6 PI系统的伯德图"></p><p>显然，在一定条件下系统是稳定的。</p><p><strong>（2） 基于PID控制器的单闭环直流电机控制系统仿真：</strong></p><p>在以上基于PI控制器的单闭环直流电机控制系统的仿真模型中，只需要调节PID控制器中的D参数为1即可改为基于PID控制器的单闭环直流电机控制系统模型，并将检测时间调节为8s，最终得到仿真的转速与电枢电流图如图4.7 4.8所示。</p><p><img src="/2020/07/11/motor-singleLoop/4.7.svg" alt="图4.7 仿真转速图（PID）"></p><p><img src="/2020/07/11/motor-singleLoop/4.8.svg" alt="图4.8 仿真电流图（PID）"></p><p>对应的根轨迹图与伯德图如图4.9 4.10所示。</p><p><img src="/2020/07/11/motor-singleLoop/4.9.svg" alt="图4.9 PID系统的根轨迹图"></p><p><img src="/2020/07/11/motor-singleLoop/4.10.svg" alt="图4.10 PID系统的伯德图"></p><p>显然，在一定条件下系统是稳定的。</p><h2 id="5、-结果分析"><a href="#5、-结果分析" class="headerlink" title="5、 结果分析"></a>5、 结果分析</h2><p>首先从电机的转速上进行讨论，通过以PI作为控制器的单闭环直流电机控制系统转速动态图像（图4.3）可知，其上升时间<script type="math/tex">t_r</script>约为<script type="math/tex">0.283s</script>，峰值时间<script type="math/tex">t_p</script>约为<script type="math/tex">0.364s</script>，调节时间<script type="math/tex">t_s</script>约为<script type="math/tex">0.892s</script>（精度为千分之一秒），超调量<script type="math/tex">σ</script>约为13.5%。</p><p>以PID作为控制器的单闭环直流电机控制系统转速动态图像如图4.6所示，其中不难得到上升时间<script type="math/tex">t_r</script>约为0.117，峰值时间<script type="math/tex">t_p</script>约为<script type="math/tex">0.125s</script>，调节时间<script type="math/tex">t_s</script>约为<script type="math/tex">5.978s</script>（精度为千分之一秒），超调量<script type="math/tex">σ</script>约为16.0%。</p><p>从上升时间来看，PID控制器整体上升较PI控制器上升较快，不过相对于调节时间与超调量来说，PI控制器的稳定性更好。PID调节器虽然多出一个微分环节但是并没有达到比较理想的效果。从图4.4与4.8来看，PI调节器的电流峰值比PID调节器更低，让它能够保证电机转子不会因为电流过大而烧毁。总体来说PI调节器在单闭环直流电机控制系统中的优势更加明显。</p><p>虽然单闭环直流电机控制系统模型采用PI控制器的优势更加明显，但是其峰值电流还是远大于额定电流，因此若加入电流调节环节，就能够更好的保证电机的运行安全。因此采用双闭环直流电机控制系统还是十分有必要的。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]    胡寿松.自动控制原理(第5版)[M].科学出版社,2007.</p><p>[2]    范影乐,杨胜天,李轶.MATLAB仿真应用详解[M].人民邮电出版社,2001.</p><p>[3]    张崇巍,李汉强.运动控制系统[M].武汉理工大学出版社,2002.1</p><p>[4]    刘陆.基于MATLAB直流电动机控制系统的建模与仿真[J].兰州工业学院学报,2014,21(01):14-17.</p><p>[5]    熊颖,乌泽.应用于直流电机控制的PID算法设计[J].电子世界,2020(06):109.</p><p>[6]    牛慧敏,常青,王耀力.永磁无刷直流电机调速系统优化控制[J].计算机仿真,2018,35(12):185-190.</p>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 控制系统 </tag>
            
            <tag> 直流电机 </tag>
            
            <tag> 学校项目 </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自制沙雕小程序】通过requests库与twilio获取学校官网的及时信息</title>
      <link href="/2020/07/10/requests_twilo/"/>
      <url>/2020/07/10/requests_twilo/</url>
      
        <content type="html"><![CDATA[<h2 id="【自制】爬取最新的开学日期并发送短信提醒的小爬虫"><a href="#【自制】爬取最新的开学日期并发送短信提醒的小爬虫" class="headerlink" title="【自制】爬取最新的开学日期并发送短信提醒的小爬虫"></a>【自制】爬取最新的开学日期并发送短信提醒的小爬虫</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=582649092&bvid=BV1e64y1u7Rc&cid=175831567&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div><p>疫情期间学校一直没有公布开学时间，热爱<del>学习</del>的我一直想要尽早返校，如果学校没有公布具体的开学日期，我就一直没法参考学校的开学时间来购买火车票，又担心学校公布开学日期后会很难买到火车票，因此设计了这样一款程序通过发送短信的方式来进行通知。</p><h2 id="1-1-设计思路"><a href="#1-1-设计思路" class="headerlink" title="1.1 设计思路"></a>1.1 设计思路</h2><p>首先程序设计分为两块，分别是<code>requests</code>库的爬虫模块和<code>twilio</code>的短信发送模块。<br>一共需要使用到<code>PyCharm、PyQT、Twilio API、Threading</code>以及爬虫三件套（requests，美味汤bs，re）。</p><p><img src="/2020/07/10/requests_twilo/1-1流程图.jpg" alt="设计思路图"></p><p>如上图所示，界面程序类作为人机交互的入口，可以控制爬虫模块与用于短信发送的<code>Twilio</code>模块。其中<code>requests</code>爬虫程序从学校的官方通知页面爬取消息，随后通过对网站html代码的分析（利用bs4+re的方法）将数据进行整理，并与之前获取的官网数据表进行处理，对比；如果获取的最新数据与原数据不一致，则将新数据保存到<code>List</code>表中；与此同时，程序在最新信息中通过正则表达式<code>re</code>进行信息提取，如果有信息包含关键词<code>Keyword</code>数据，则打开<code>Twilio</code>模块进行最新信息的推送。</p><h3 id="2-1-爬虫程序的设计"><a href="#2-1-爬虫程序的设计" class="headerlink" title="2.1 爬虫程序的设计"></a>2.1 爬虫程序的设计</h3><p>先进行学校官网页面的爬取，在此以我母校<a href="http://www.njit.edu.cn/index/tzgg.htm">南京工程学院的官网消息推送页面</a>作为例子，我们获得学校官网的html，利用requests的代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.njit.edu.cn/index/tzgg.htm&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span>       <span class="comment">#获取网页代码与信息</span></span><br><span class="line">    header = &#123;</span><br><span class="line">         <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64)&#x27;</span>     <span class="comment">#反扒标识</span></span><br><span class="line">                      <span class="string">&#x27;AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;Chrome/61.0.3163.79 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,headers=header,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Html is Ok&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><br>得到通知页面的html代码后，进行网页代码的分析，首先我们需要明确我们提取的信息是以下网页代码的字段：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagetop&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;conter&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot; header&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/system/resourse/js/news/statpagedown.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;line_uX_X&quot;</span>&gt;</span>  $ X=(0,1,2,...,n),会有很多个这种通知条目</span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;需要</span></span></span><br><span class="line"><span class="string"><span class="tag">          提取的表头&quot;</span> <span class="attr">href</span>=<span class="string">&quot;需要提取的通知地址&quot;</span>&gt;</span>需要提取的字段<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>将以上html中存储的网页字段信息进行提取，先利用<code>BeautifulSoup</code>美味汤进行整段网页字段的初步定位，随后再利用<code>re</code>正则表达式来进行字段信息的提取，将这些字段信息整理为一个<code>List</code>表格，代码如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beLists</span>(<span class="params">html</span>):</span>      <span class="comment">#将获取到的页面信息转换成三维的数据列表</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Lists = []</span><br><span class="line">        soup = bs(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        temp = soup.body.find_all(<span class="string">&#x27;div&#x27;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;conter&quot;</span>&#125;)</span><br><span class="line">        <span class="comment">#print(type(temp))</span></span><br><span class="line">        <span class="comment">#print(str(temp))</span></span><br><span class="line">        temp = re.findall(<span class="string">r&#x27;&lt;li id=&quot;line\S*&quot;&gt;([\s\S]*?)&lt;/li&gt;&#x27;</span>,<span class="built_in">str</span>(temp))</span><br><span class="line">        <span class="comment">#print(temp)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">            mess = re.findall(<span class="string">r&#x27;title=&quot;(\S*?)&quot;&#x27;</span>,temp[i])[<span class="number">0</span>]</span><br><span class="line">            date = re.findall(<span class="string">r&#x27;class=&quot;date&quot;&gt;\[(\S*?)\]&lt;/span&gt;&#x27;</span>,temp[i])[<span class="number">0</span>]</span><br><span class="line">            path = re.findall(<span class="string">r&#x27;href=&quot;\.\.(\S*?)&quot;&#x27;</span>,temp[i])[<span class="number">0</span>]</span><br><span class="line">            Lists.append([mess,date,<span class="string">&quot;http://www.njit.edu.cn&quot;</span>+path])</span><br><span class="line">        <span class="keyword">return</span> Lists</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;解析数据出现问题&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><br>得到<code>List</code>表后，再与原来获得的数据进行对比，程序设计如下（包含了import文件）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">storageList = []        <span class="comment">#用于储存旧的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateMessage</span>(<span class="params">inLists</span>):</span>     <span class="comment">#检查信息是否出现变化，如果变化则返回最新信息</span></span><br><span class="line">    <span class="keyword">global</span> storageList</span><br><span class="line">    <span class="comment">#print(inLists)</span></span><br><span class="line">    <span class="comment">#print((storageList))</span></span><br><span class="line">    <span class="keyword">if</span> inLists == storageList:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        newList = []</span><br><span class="line">        conf = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inLists)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(storageList)):</span><br><span class="line">                <span class="keyword">if</span> inLists[i] == storageList[j]:</span><br><span class="line">                    conf = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> conf == <span class="literal">False</span>:</span><br><span class="line">                newList.append(inLists[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                conf = <span class="literal">False</span></span><br><span class="line">        storageList = inLists</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(newList) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> newList</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">robotMain</span>(<span class="params">url</span>):</span>        <span class="comment">#程序主界面</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    <span class="keyword">if</span> html == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未爬取到任何信息&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        feedback = updateMessage(beLists(html))</span><br><span class="line">        <span class="keyword">if</span> feedback != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;通知数据已更新。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> feedback</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;暂无更新。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><br>如果有新的信息则进入<code>Twilio</code>模块进行短信的发送。</p><h3 id="2-2-Twilio的配置"><a href="#2-2-Twilio的配置" class="headerlink" title="2.2 Twilio的配置"></a>2.2 Twilio的配置</h3><p>进入<a href="https://www.twilio.com/">Twilio官网</a>，如果没有<code>Twilio</code>账号，则进行账号的注册。</p><p>在twilio的官网注册一个试用账号，过程中需要绑定你的手机，然后获得免费的twilio号码，从你的账户界面（Dsahboard）就可以看到ACCOUNT SID和AUTH TOKEN了，以及给你的Phone Number，如下图所示：</p><p><img src="/2020/07/10/requests_twilo/twilio_info.jpg" alt="Twilio API信息"></p><p>接下来安装<code>Twilio API</code>库，使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twilio</span><br></pre></td></tr></table></figure><br>安装即可，配置好环境后，进入<code>PyCharm</code>集成开发环境，这里直接上代码，其中的X都可以进行替换。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twilio.rest <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span>(<span class="params">phonenum,messages</span>):</span>     <span class="comment"># 此为短信发送设置，请登录twilio获取XXXX与0000部分</span></span><br><span class="line">    res = re.match(<span class="string">r&#x27;^1[35789]\d&#123;9&#125;$&#x27;</span>,phonenum)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        account_sid = <span class="string">&#x27;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#x27;</span> <span class="comment"># 由Twilio的account sid提供</span></span><br><span class="line">        auth_token = <span class="string">&#x27;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#x27;</span>  <span class="comment"># 由Twilio的auth token提供</span></span><br><span class="line">        client = Client(account_sid, auth_token)</span><br><span class="line">        <span class="comment"># from_这里要提供Twilio的TRIAL NUMBER，body则是发送的短信内容，to里是接收手机的号码，需要加国际区号</span></span><br><span class="line">        message = client.messages.create(from_=<span class="string">&#x27;+00000000&#x27;</span>,body=messages,to=<span class="string">&#x27;+86&#x27;</span> + phonenum)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br>随后进行测试，免费版会受到以下的信息，到此<code>Twilio</code>模块的配置完成。 </p><p><img src="/2020/07/10/requests_twilo/test_message.jpg" alt="测试短信消息"></p><h3 id="2-3-利用PyQT开发界面"><a href="#2-3-利用PyQT开发界面" class="headerlink" title="2.3 利用PyQT开发界面"></a>2.3 利用PyQT开发界面</h3><p>打开<code>QtDesigner</code>设计界面，本人太懒了直接使用的图形操作界面生成界面的前段代码，获得的界面如下图所示。</p><p><img src="/2020/07/10/requests_twilo/ui_show.jpg" alt="UI界面"></p><p>保存设计好的UI界面后，通过<code>PyUIC</code>将前端代码转换为Python类代码，可得以下的UI界面的Python代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;sysUI.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.9.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">773</span>, <span class="number">654</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)</span><br><span class="line">        self.groupBox_2.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">430</span>, <span class="number">741</span>, <span class="number">221</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setFamily(<span class="string">&quot;Arial&quot;</span>)</span><br><span class="line">        font.setPointSize(<span class="number">11</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        self.groupBox_2.setFont(font)</span><br><span class="line">        self.groupBox_2.setObjectName(<span class="string">&quot;groupBox_2&quot;</span>)</span><br><span class="line">        self.lineEdit_address = QtWidgets.QLineEdit(self.groupBox_2)</span><br><span class="line">        self.lineEdit_address.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">30</span>, <span class="number">341</span>, <span class="number">31</span>))</span><br><span class="line">        self.lineEdit_address.setObjectName(<span class="string">&quot;lineEdit_address&quot;</span>)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.groupBox_2)</span><br><span class="line">        self.label_2.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">40</span>, <span class="number">72</span>, <span class="number">15</span>))</span><br><span class="line">        self.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox_2)</span><br><span class="line">        self.gridLayoutWidget.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">119</span>, <span class="number">381</span>, <span class="number">41</span>))</span><br><span class="line">        self.gridLayoutWidget.setObjectName(<span class="string">&quot;gridLayoutWidget&quot;</span>)</span><br><span class="line">        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)</span><br><span class="line">        self.gridLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.gridLayout.setObjectName(<span class="string">&quot;gridLayout&quot;</span>)</span><br><span class="line">        self.btn_webConfirm = QtWidgets.QPushButton(self.gridLayoutWidget)</span><br><span class="line">        self.btn_webConfirm.setObjectName(<span class="string">&quot;btn_webConfirm&quot;</span>)</span><br><span class="line">        self.gridLayout.addWidget(self.btn_webConfirm, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.label_3 = QtWidgets.QLabel(self.groupBox_2)</span><br><span class="line">        self.label_3.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">16</span>))</span><br><span class="line">        self.label_3.setObjectName(<span class="string">&quot;label_3&quot;</span>)</span><br><span class="line">        self.lineEdit_time = QtWidgets.QLineEdit(self.groupBox_2)</span><br><span class="line">        self.lineEdit_time.setGeometry(QtCore.QRect(<span class="number">100</span>, <span class="number">70</span>, <span class="number">151</span>, <span class="number">31</span>))</span><br><span class="line">        self.lineEdit_time.setLayoutDirection(QtCore.Qt.LeftToRight)</span><br><span class="line">        self.lineEdit_time.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line">        self.lineEdit_time.setObjectName(<span class="string">&quot;lineEdit_time&quot;</span>)</span><br><span class="line">        self.label_4 = QtWidgets.QLabel(self.groupBox_2)</span><br><span class="line">        self.label_4.setGeometry(QtCore.QRect(<span class="number">260</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">16</span>))</span><br><span class="line">        self.label_4.setObjectName(<span class="string">&quot;label_4&quot;</span>)</span><br><span class="line">        self.btn_timeSet = QtWidgets.QPushButton(self.groupBox_2)</span><br><span class="line">        self.btn_timeSet.setGeometry(QtCore.QRect(<span class="number">280</span>, <span class="number">70</span>, <span class="number">121</span>, <span class="number">30</span>))</span><br><span class="line">        self.btn_timeSet.setObjectName(<span class="string">&quot;btn_timeSet&quot;</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.groupBox_2)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">440</span>, <span class="number">40</span>, <span class="number">72</span>, <span class="number">15</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        self.lineEdit_phoneNum = QtWidgets.QLineEdit(self.groupBox_2)</span><br><span class="line">        self.lineEdit_phoneNum.setGeometry(QtCore.QRect(<span class="number">520</span>, <span class="number">30</span>, <span class="number">211</span>, <span class="number">31</span>))</span><br><span class="line">        self.lineEdit_phoneNum.setEchoMode(QtWidgets.QLineEdit.Password)</span><br><span class="line">        self.lineEdit_phoneNum.setObjectName(<span class="string">&quot;lineEdit_phoneNum&quot;</span>)</span><br><span class="line">        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox_2)</span><br><span class="line">        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(<span class="number">440</span>, <span class="number">70</span>, <span class="number">291</span>, <span class="number">32</span>))</span><br><span class="line">        self.horizontalLayoutWidget.setObjectName(<span class="string">&quot;horizontalLayoutWidget&quot;</span>)</span><br><span class="line">        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)</span><br><span class="line">        self.horizontalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.horizontalLayout.setObjectName(<span class="string">&quot;horizontalLayout&quot;</span>)</span><br><span class="line">        self.btn_setphoneNum = QtWidgets.QPushButton(self.horizontalLayoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.btn_setphoneNum.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.btn_setphoneNum.setSizePolicy(sizePolicy)</span><br><span class="line">        self.btn_setphoneNum.setObjectName(<span class="string">&quot;btn_setphoneNum&quot;</span>)</span><br><span class="line">        self.horizontalLayout.addWidget(self.btn_setphoneNum)</span><br><span class="line">        self.btn_phoneTest = QtWidgets.QPushButton(self.horizontalLayoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.btn_phoneTest.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.btn_phoneTest.setSizePolicy(sizePolicy)</span><br><span class="line">        self.btn_phoneTest.setObjectName(<span class="string">&quot;btn_phoneTest&quot;</span>)</span><br><span class="line">        self.horizontalLayout.addWidget(self.btn_phoneTest)</span><br><span class="line">        self.lineEdit_Keyword = QtWidgets.QLineEdit(self.groupBox_2)</span><br><span class="line">        self.lineEdit_Keyword.setGeometry(QtCore.QRect(<span class="number">520</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">31</span>))</span><br><span class="line">        self.lineEdit_Keyword.setText(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        self.lineEdit_Keyword.setObjectName(<span class="string">&quot;lineEdit_Keyword&quot;</span>)</span><br><span class="line">        self.label_5 = QtWidgets.QLabel(self.groupBox_2)</span><br><span class="line">        self.label_5.setGeometry(QtCore.QRect(<span class="number">440</span>, <span class="number">130</span>, <span class="number">72</span>, <span class="number">15</span>))</span><br><span class="line">        self.label_5.setObjectName(<span class="string">&quot;label_5&quot;</span>)</span><br><span class="line">        self.btn_kwedit = QtWidgets.QPushButton(self.groupBox_2)</span><br><span class="line">        self.btn_kwedit.setGeometry(QtCore.QRect(<span class="number">640</span>, <span class="number">120</span>, <span class="number">91</span>, <span class="number">30</span>))</span><br><span class="line">        self.btn_kwedit.setObjectName(<span class="string">&quot;btn_kwedit&quot;</span>)</span><br><span class="line">        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)</span><br><span class="line">        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">170</span>, <span class="number">721</span>, <span class="number">41</span>))</span><br><span class="line">        self.horizontalLayoutWidget_2.setObjectName(<span class="string">&quot;horizontalLayoutWidget_2&quot;</span>)</span><br><span class="line">        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)</span><br><span class="line">        self.horizontalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.horizontalLayout_2.setObjectName(<span class="string">&quot;horizontalLayout_2&quot;</span>)</span><br><span class="line">        self.btn_start = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)</span><br><span class="line">        self.btn_start.setObjectName(<span class="string">&quot;btn_start&quot;</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.btn_start)</span><br><span class="line">        self.btn_stop = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)</span><br><span class="line">        self.btn_stop.setObjectName(<span class="string">&quot;btn_stop&quot;</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.btn_stop)</span><br><span class="line">        self.view_console = QtWidgets.QTextEdit(self.centralwidget)</span><br><span class="line">        self.view_console.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        self.view_console.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">10</span>, <span class="number">741</span>, <span class="number">411</span>))</span><br><span class="line">        self.view_console.setInputMethodHints(QtCore.Qt.ImhNone)</span><br><span class="line">        self.view_console.setReadOnly(<span class="literal">True</span>)</span><br><span class="line">        self.view_console.setObjectName(<span class="string">&quot;view_console&quot;</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span>(<span class="params">self, MainWindow</span>):</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;官网动态通知获取程序，开学日期提醒&quot;</span>))</span><br><span class="line">        self.groupBox_2.setTitle(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;操作面板&quot;</span>))</span><br><span class="line">        self.label_2.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;网址：&quot;</span>))</span><br><span class="line">        self.btn_webConfirm.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;确认网址&quot;</span>))</span><br><span class="line">        self.label_3.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;间隔时间：&quot;</span>))</span><br><span class="line">        self.lineEdit_time.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;2&quot;</span>))</span><br><span class="line">        self.label_4.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;S&quot;</span>))</span><br><span class="line">        self.btn_timeSet.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;设置间隔时间&quot;</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;手机号：&quot;</span>))</span><br><span class="line">        self.btn_setphoneNum.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;确定设置&quot;</span>))</span><br><span class="line">        self.btn_phoneTest.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;测试一下&quot;</span>))</span><br><span class="line">        self.label_5.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;关键词：&quot;</span>))</span><br><span class="line">        self.btn_kwedit.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;修改&quot;</span>))</span><br><span class="line">        self.btn_start.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;开始  Start&quot;</span>))</span><br><span class="line">        self.btn_stop.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;停止  Stop&quot;</span>))</span><br></pre></td></tr></table></figure></p><h2 id="3-1-程序的调试与使用"><a href="#3-1-程序的调试与使用" class="headerlink" title="3.1 程序的调试与使用"></a>3.1 程序的调试与使用</h2><p>将以上三种模块进行组合，将子程序写入<code>PyQt</code>的<code>Class</code>类中，可以得到如下的代码，随后使用<code>PyInstaller</code>进行程序的打包，若没有<code>PyInstaller</code>则可在python环境下的<code>shell</code>中输入<code>pip install pyinstaller</code>，生成exe可执行程序，准备程序的图标，使用以下代码进行打包。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w -i YourIcon YouSoftware.py</span><br></pre></td></tr></table></figure><br>详细的PyInstaller程序打包说明请<a href="https://pyinstaller.readthedocs.io/en/stable/">点击这里</a></p><p>点击运行程序：</p><p><img src="/2020/07/10/requests_twilo/run_test.jpg" alt="调试程序界面"></p><p>其中：</p><pre><code>1. 输入需要爬取信息的页面，也就是学校官网的消息页面，点击确认网址即可进行确定； 2. 输入的信息爬取间隔时间，以秒为单位，这个操作可以减少爬取页面的服务器的内存资源（为服务器君着想），点击设置间隔时间进行确定；3. 输入接收手机的号码，因为代码中已经默认加入中国的区号（+86），因此只需要输入中国大陆的手机号码即可，点击确定设置进行确认，也可以点击测试一下进行短信的发送验证；4. 输入需要检索的关键词信息，这里主要检测获取的最新信息中是否存在包含关键词的内容，如果包含关键词则将这条信息进行发送，若没有包含则不进行短信的发送；5. 此处空白主要显示操作的信息反馈，不可输入。</code></pre><p><strong>完成以上信息的配置之后，点击<code>开始（Start）</code>运行程序，运行程序时可以使用<code>停止（Stop）</code>停止运行。</strong></p><h2 id="4-1-心得"><a href="#4-1-心得" class="headerlink" title="4.1 心得"></a>4.1 心得</h2><p>本程序可以改成API进行直接调用，算是日常里面的一个沙雕程序，在Python学习上更进一步吧，源程序地址<a href="https://github.com/JimmyLiang-lzm/TimeForSchool">点击这里</a>，欢迎<strong>Star</strong>或者<strong>Fork</strong>！</p>]]></content>
      
      
      <categories>
          
          <category> 沙雕小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown标记语言学习手记</title>
      <link href="/2020/07/09/MarkDown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/"/>
      <url>/2020/07/09/MarkDown%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Markdown是一种轻量级的「标记语言」</strong></p><p><img src="https://www.mdeditor.com/images/logos/markdown.png" alt="markdown" title="markdown"></p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面，Markdown文件的后缀名便是“.md”</p><h2 id="Markdown语法效果"><a href="#Markdown语法效果" class="headerlink" title="Markdown语法效果"></a>Markdown语法效果</h2><h1 id="标题H1"><a href="#标题H1" class="headerlink" title="标题H1"></a>标题H1</h1><h2 id="标题H2"><a href="#标题H2" class="headerlink" title="标题H2"></a>标题H2</h2><h3 id="标题H3"><a href="#标题H3" class="headerlink" title="标题H3"></a>标题H3</h3><h4 id="标题H4"><a href="#标题H4" class="headerlink" title="标题H4"></a>标题H4</h4><h5 id="标题H5"><a href="#标题H5" class="headerlink" title="标题H5"></a>标题H5</h5><h6 id="标题H5-1"><a href="#标题H5-1" class="headerlink" title="标题H5"></a>标题H5</h6><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s></p><p><em>斜体字</em>      <em>斜体字</em></p><p><strong>粗体</strong>  <strong>粗体</strong></p><p><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="https://www.mdeditor.com/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="https://www.mdeditor.com/">普通链接</a><br><a href="https://www.mdeditor.com/" title="普通链接带标题">普通链接带标题</a><br>直接链接：<a href="https://www.mdeditor.com">https://www.mdeditor.com</a><br><a href="https://www.mdeditor.com/">锚点链接</a></p><p><a href="mailto:test.test@gmail.com">mailto:test.test@gmail.com</a><br>GFM a-tail link @pandao<br>邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Editor.md, Markdown, Editor&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">color</span>:<span class="number">#444</span>;<span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>, Tahoma, <span class="string">&quot;Hiragino Sans GB&quot;</span>, Arial;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">vertical-align</span>: middle;&#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-xxl&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-green&quot;</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>图片加链接 (Image + Link)：</p><p><a href="https://www.mdeditor.com/images/logos/markdown.png" title="markdown"><img src="https://www.mdeditor.com/images/logos/markdown.png" alt></a></p><blockquote><p>Follow your heart.</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li>[x] GFM task list 1</li><li>[x] GFM task list 2</li><li>[ ] GFM task list 3<ul><li>[ ] GFM task list 3-1</li><li>[ ] GFM task list 3-2</li><li>[ ] GFM task list 3-3</li></ul></li><li>[ ] GFM task list 4<ul><li>[ ] GFM task list 4-1</li><li>[ ] GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><div class="table-container"><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>Item</th><th style="text-align:right">Value</th></tr></thead><tbody><tr><td>Computer</td><td style="text-align:right">$1600</td></tr><tr><td>Phone</td><td style="text-align:right">$12</td></tr><tr><td>Pipe</td><td style="text-align:right">$1</td></tr></tbody></table></div><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><p>18&ordm;C  &quot;  &apos;</p><p>[========]</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li>[x] :smiley: @mentions, :smiley: #refs, <a href>links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li>[x] [ ] :smiley: this is a complete item :smiley:;</li><li>[ ] []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li>[ ] :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><p>[========]</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><script type="math/tex; mode=display">E=mc^2</script><p>行内的公式<script type="math/tex">E=mc^2</script>行内的公式，行内的<script type="math/tex">E=mc^2</script>公式。</p><script type="math/tex; mode=display">x > y</script><script type="math/tex; mode=display">\(\sqrt{3x-1}+(1+x)^2\)</script><script type="math/tex; mode=display">\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))</script><p>多行公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = \int_&#123;-\infty&#125;^\infty</span><br><span class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</span><br><span class="line">    \,d\xi</span><br></pre></td></tr></table></figure><h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote><p>Print Test: Ctrl + P</p></blockquote><p>[========]</p><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>[========]</p><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
      
      
      <categories>
          
          <category> 学习手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
